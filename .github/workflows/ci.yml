name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # =============================================================================
  # CODE QUALITY & LINTING
  # =============================================================================
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Format check
        run: cargo fmt --all -- --check

      - name: Clippy check
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check documentation
        run: cargo doc --all-features --no-deps --document-private-items

  # =============================================================================
  # TESTING
  # =============================================================================
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        feature-set: [default, real-models, onnx-models, candle-models, full]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests (default features)
        if: matrix.feature-set == 'default'
        run: cargo test --verbose

      - name: Run tests (real-models)
        if: matrix.feature-set == 'real-models'
        run: cargo test --features real-models --verbose

      - name: Run tests (onnx-models)
        if: matrix.feature-set == 'onnx-models'
        run: cargo test --features onnx-models --verbose

      - name: Run tests (candle-models)
        if: matrix.feature-set == 'candle-models'
        run: cargo test --features candle-models --verbose

      - name: Run tests (full features)
        if: matrix.feature-set == 'full'
        run: cargo test --features full --verbose

      - name: Run integration tests
        run: cargo test --test integration --verbose

      - name: Run benchmarks (dry run)
        run: cargo bench --no-run

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.feature-set }}
          path: target/test-results/

  # =============================================================================
  # SECURITY AUDIT
  # =============================================================================
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

      - name: Check for known vulnerabilities
        run: cargo audit --deny warnings

  # =============================================================================
  # BUILD & COMPILATION
  # =============================================================================
  build:
    name: Build & Compilation
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        target:
          - ubuntu-latest: x86_64-unknown-linux-gnu
          - windows-latest: x86_64-pc-windows-msvc
          - macos-latest: x86_64-apple-darwin
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build (default features)
        run: cargo build --verbose

      - name: Build (all features)
        run: cargo build --features full --verbose

      - name: Build CLI tools
        run: cargo build --bin vectorizer-cli --bin vectorizer-server --verbose

      - name: Build release
        run: cargo build --release --verbose

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.os }}-${{ matrix.target }}
          path: target/release/
          retention-days: 7

  # =============================================================================
  # MCP INTEGRATION TESTS
  # =============================================================================
  mcp-integration:
    name: MCP Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Node.js (for MCP client testing)
        uses: actions/setup-node@v5
        with:
          node-version: '18'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/Cargo.lock', '**/package-lock.json') }}

      - name: Build MCP server
        run: cargo build --bin vectorizer-server --features full --verbose

      - name: Start MCP server
        run: |
          cargo run --bin vectorizer-server --features full &
          sleep 10
        env:
          RUST_LOG: info

      - name: Test MCP WebSocket connection
        run: |
          # Test WebSocket connection to MCP server
          node -e "
          const WebSocket = require('ws');
          const ws = new WebSocket('ws://127.0.0.1:15003/mcp');
          
          ws.on('open', () => {
            console.log('MCP WebSocket connection established');
            ws.close();
            process.exit(0);
          });
          
          ws.on('error', (error) => {
            console.error('MCP WebSocket connection failed:', error);
            process.exit(1);
          });
          
          setTimeout(() => {
            console.error('MCP WebSocket connection timeout');
            process.exit(1);
          }, 5000);
          "

      - name: Test MCP tools
        run: |
          # Test MCP tools via HTTP API
          curl -X GET http://127.0.0.1:15001/health
          curl -X GET http://127.0.0.1:15001/status
          curl -X GET http://127.0.0.1:15001/collections

      - name: Upload MCP test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: mcp-test-results
          path: mcp-test-logs/

  # =============================================================================
  # PERFORMANCE BENCHMARKS
  # =============================================================================
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run benchmarks
        run: |
          cargo bench --features full -- --output-format json | tee benchmark-results.json

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark-results.json

      - name: Comment benchmark results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('benchmark-results.json', 'utf8'));
            
            let comment = '## 📊 Benchmark Results\n\n';
            comment += '| Test | Mean | Std Dev |\n';
            comment += '|------|------|----------|\n';
            
            results.benchmarks.forEach(bench => {
              comment += `| ${bench.name} | ${bench.mean} | ${bench.std_dev} |\n`;
            });
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # =============================================================================
  # DEPLOYMENT
  # =============================================================================
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [lint, test, security, build, mcp-integration, benchmark]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build release artifacts
        run: |
          cargo build --release --features full
          cargo build --release --bin vectorizer-cli --bin vectorizer-server

      - name: Create release archive
        run: |
          mkdir -p release
          cp target/release/vectorizer-cli release/
          cp target/release/vectorizer-server release/
          cp config.example.yml release/
          cp README.md release/
          cp LICENSE release/
          tar -czf vectorizer-release.tar.gz release/

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: vectorizer-release.tar.gz

      - name: Create GitHub Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: vectorizer-release.tar.gz
          body: |
            ## 🚀 Vectorizer Release
            
            ### Features
            - High-performance vector database
            - MCP (Model Context Protocol) integration
            - Multiple embedding models support
            - REST API and CLI tools
            
            ### Installation
            ```bash
            # Extract and run
            tar -xzf vectorizer-release.tar.gz
            cd release
            ./vectorizer-server --config config.example.yml
            ```
            
            ### MCP Integration
            - WebSocket endpoint: `ws://127.0.0.1:15003/mcp`
            - Available tools: search_vectors, list_collections, embed_text, etc.
            - Authentication via API keys
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # =============================================================================
  # NOTIFICATIONS
  # =============================================================================
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, test, security, build, mcp-integration, benchmark, deploy]
    if: always()
    steps:
      - name: Notify success
        if: ${{ needs.deploy.result == 'success' }}
        run: |
          echo "✅ All CI/CD checks passed successfully!"
          echo "🚀 Vectorizer is ready for deployment"

      - name: Notify failure
        if: ${{ needs.deploy.result == 'failure' }}
        run: |
          echo "❌ CI/CD pipeline failed"
          echo "Please check the logs for details"
          exit 1
