name: Rust tests

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ '**' ]

env:
  CARGO_TERM_COLOR: always

jobs:
  rust-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]

    steps:
    - name: Install minimal stable
      uses: dtolnay/rust-toolchain@stable
    - uses: actions/checkout@v5
    - uses: Swatinem/rust-cache@v2
    - name: Install mold
      uses: rui314/setup-mold@v1
    - name: Enable mold on Linux
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          mkdir -p .cargo
          echo "[target.x86_64-unknown-linux-gnu]" >> .cargo/config.toml
          echo "linker = \"clang\"" >> .cargo/config.toml
          echo "rustflags = [\"-C\", \"link-arg=-fuse-ld=/usr/local/bin/mold\"]" >> .cargo/config.toml
        fi
      shell: bash
    - name: Install nextest
      uses: taiki-e/install-action@nextest
    - name: Build
      run: cargo build --tests --workspace
    - name: Run unit and integration tests
      timeout-minutes: 30
      run: cargo nextest run --workspace --all-features --all-targets --test-threads 4
      env:
        # Set test timeouts for integration tests
        NEXTEST_TIMEOUT: 300s
    - name: Run integration tests specifically
      timeout-minutes: 20
      run: |
        # Run new integration tests with extended timeout
        cargo nextest run \
          --test api_workflow_test \
          --test concurrent_test \
          --test multi_collection_test \
          --workspace --all-features
      env:
        # Extended timeout for integration tests (600 seconds = 10 minutes)
        NEXTEST_TIMEOUT: 600s
    - name: Run doc tests
      run: cargo test --workspace --doc --all-features
    - name: Upload test report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: junit-${{ matrix.os }}.xml
        path: target/nextest/default/junit.xml
        if-no-files-found: ignore

  # Monitor test stability over time
  test-stability:
    runs-on: ubuntu-latest
    needs: rust-tests
    if: always()
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v5
      - name: Download test reports
        uses: actions/download-artifact@v5
        continue-on-error: true
        with:
          pattern: junit-*.xml
          merge-multiple: true
      - name: Track test stability
        run: |
          mkdir -p .test-history
          TIMESTAMP=$(date +%s)
          
          # Count test results
          if [ -f junit-ubuntu-latest.xml ]; then
            TOTAL=$(grep -o 'tests="[0-9]*"' junit-ubuntu-latest.xml | head -1 | grep -o '[0-9]*' || echo "0")
            FAILURES=$(grep -o 'failures="[0-9]*"' junit-ubuntu-latest.xml | head -1 | grep -o '[0-9]*' || echo "0")
            ERRORS=$(grep -o 'errors="[0-9]*"' junit-ubuntu-latest.xml | head -1 | grep -o '[0-9]*' || echo "0")
            
            echo "$TIMESTAMP,$TOTAL,$FAILURES,$ERRORS" >> .test-history/stability.csv
            
            # Keep last 100 runs only
            tail -n 100 .test-history/stability.csv > .test-history/stability.csv.tmp
            mv .test-history/stability.csv.tmp .test-history/stability.csv
            
            # Calculate pass rate
            PASSED=$((TOTAL - FAILURES - ERRORS))
            PASS_RATE=$((PASSED * 100 / TOTAL))
            
            echo "### Test Stability Report ðŸ“Š" >> $GITHUB_STEP_SUMMARY
            echo "- Total Tests: $TOTAL" >> $GITHUB_STEP_SUMMARY
            echo "- Passed: $PASSED" >> $GITHUB_STEP_SUMMARY
            echo "- Failed: $FAILURES" >> $GITHUB_STEP_SUMMARY
            echo "- Errors: $ERRORS" >> $GITHUB_STEP_SUMMARY
            echo "- Pass Rate: ${PASS_RATE}%" >> $GITHUB_STEP_SUMMARY
            
            # Warning if pass rate < 95%
            if [ $PASS_RATE -lt 95 ]; then
              echo "::warning::Test pass rate below 95%: ${PASS_RATE}%"
            fi
          else
            echo "::warning::No test report found for stability tracking"
          fi
      - name: Commit test history
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .test-history/
          git diff --staged --quiet || git commit -m "chore: update test stability history [skip ci]"
          git push
        continue-on-error: true

  # Process test results and create issues for flaky tests
  process-results:
    runs-on: ubuntu-latest
    needs: rust-tests
    if: always()
    permissions:
      contents: read
      issues: write
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
    steps:
      - name: Download test report
        uses: actions/download-artifact@v5
        continue-on-error: true
        with:
          name: junit-${{ matrix.os }}.xml
      - name: Process test report
        id: process-test-report
        continue-on-error: true
        run: |
          if [ ! -f junit.xml ]; then
            echo "No test report found, skipping"
            echo "has_flaky_tests=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          pip install yq
          xq '.. | select(type == "object") | select(has("flakyFailure"))' junit.xml > flaky_tests.json || echo "{}" > flaky_tests.json
          echo has_flaky_tests=$(jq '. | has("flakyFailure")' flaky_tests.json) >> $GITHUB_OUTPUT
      - name: Get flaky test details
        id: get-flaky-tests
        if: ${{ steps.process-test-report.outputs.has_flaky_tests == 'true' }}
        run: |
          echo "Flaky tests found"
          echo test=$(jq '.["@name"]' flaky_tests.json -r ) >> $GITHUB_OUTPUT
          delimiter="###r###"
          echo "content<<$delimiter" >> $GITHUB_OUTPUT
          echo "$(jq '[.flakyFailure] | flatten | .[0]["system-err"]' flaky_tests.json -r)" >> $GITHUB_OUTPUT
          echo $delimiter >> $GITHUB_OUTPUT
      - name: Report flaky tests
        if: ${{ steps.process-test-report.outputs.has_flaky_tests == 'true' }}
        run: |
          echo "::warning::Flaky test detected: ${{ steps.get-flaky-tests.outputs.test }}"
          echo "OS: ${{ matrix.os }}"
          echo "Details: ${{ steps.get-flaky-tests.outputs.content }}"

