name: Rust tests

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ '**' ]

env:
  CARGO_TERM_COLOR: always

jobs:
  rust-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]

    steps:
    - name: Install minimal stable
      uses: dtolnay/rust-toolchain@stable
    - uses: actions/checkout@v5
    - uses: Swatinem/rust-cache@v2
    - name: Install mold
      uses: rui314/setup-mold@v1
    - name: Enable mold on Linux
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          mkdir -p .cargo
          echo "[target.x86_64-unknown-linux-gnu]" >> .cargo/config.toml
          echo "linker = \"clang\"" >> .cargo/config.toml
          echo "rustflags = [\"-C\", \"link-arg=-fuse-ld=/usr/local/bin/mold\"]" >> .cargo/config.toml
        fi
      shell: bash
    - name: Install nextest
      uses: taiki-e/install-action@nextest
    - name: Build
      run: cargo build --tests --workspace
    - name: Run tests
      run: cargo nextest run --workspace
    - name: Upload test report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: junit-${{ matrix.os }}.xml
        path: target/nextest/default/junit.xml
        if-no-files-found: ignore

  # Process test results and create issues for flaky tests
  process-results:
    runs-on: ubuntu-latest
    needs: rust-tests
    if: always()
    permissions:
      contents: read
      issues: write
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
    steps:
      - name: Download test report
        uses: actions/download-artifact@v5
        continue-on-error: true
        with:
          name: junit-${{ matrix.os }}.xml
      - name: Process test report
        id: process-test-report
        continue-on-error: true
        run: |
          if [ ! -f junit.xml ]; then
            echo "No test report found, skipping"
            echo "has_flaky_tests=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          pip install yq
          xq '.. | select(type == "object") | select(has("flakyFailure"))' junit.xml > flaky_tests.json || echo "{}" > flaky_tests.json
          echo has_flaky_tests=$(jq '. | has("flakyFailure")' flaky_tests.json) >> $GITHUB_OUTPUT
      - name: Get flaky test details
        id: get-flaky-tests
        if: ${{ steps.process-test-report.outputs.has_flaky_tests == 'true' }}
        run: |
          echo "Flaky tests found"
          echo test=$(jq '.["@name"]' flaky_tests.json -r ) >> $GITHUB_OUTPUT
          delimiter="###r###"
          echo "content<<$delimiter" >> $GITHUB_OUTPUT
          echo "$(jq '[.flakyFailure] | flatten | .[0]["system-err"]' flaky_tests.json -r)" >> $GITHUB_OUTPUT
          echo $delimiter >> $GITHUB_OUTPUT
      - name: Report flaky tests
        if: ${{ steps.process-test-report.outputs.has_flaky_tests == 'true' }}
        run: |
          echo "::warning::Flaky test detected: ${{ steps.get-flaky-tests.outputs.test }}"
          echo "OS: ${{ matrix.os }}"
          echo "Details: ${{ steps.get-flaky-tests.outputs.content }}"

