name: Build and deploy docker image

on:
  push:
    # Pattern matched against refs/tags
    tags:
      - '*'           # Push events to every tag not containing /

jobs:

  build:
    # Run build on our self-hosted runner or ubuntu-latest
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write # needed for cosign keyless signing with OIDC
    steps:
    - uses: actions/checkout@v5
    - uses: Swatinem/rust-cache@v2
    - name: Install cosign
      uses: sigstore/cosign-installer@v4.0.0
    - name: Get current tag
      id: vars
      run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
    - name: Get minor and major tags
      id: version
      run: |
        MAJOR_VERSION=$(echo "${{ steps.vars.outputs.tag }}" | cut -d '.' -f 1)
        MINOR_VERSION=$(echo "${{ steps.vars.outputs.tag }}" | cut -d '.' -f 1-2)
        echo "major_version=${MAJOR_VERSION}" >> $GITHUB_OUTPUT
        echo "minor_version=${MINOR_VERSION}" >> $GITHUB_OUTPUT
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request' && secrets.DOCKERHUB_TOKEN != ''
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Log in to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build the Docker image
      env:
        RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
        MAJOR_VERSION: ${{ steps.version.outputs.major_version }}
        MINOR_VERSION: ${{ steps.version.outputs.minor_version }}
      run: |

        # Build regular image
        GHCR_TAG="ghcr.io/${{ github.repository_owner }}/vectorizer:${{ github.ref_name }}"
        GHCR_TAG_LATEST="ghcr.io/${{ github.repository_owner }}/vectorizer:latest"
        GHCR_TAG_MINOR="ghcr.io/${{ github.repository_owner }}/vectorizer:${MINOR_VERSION}"
        GHCR_TAG_MAJOR="ghcr.io/${{ github.repository_owner }}/vectorizer:${MAJOR_VERSION}"
        TAGS="-t ${GHCR_TAG} -t ${GHCR_TAG_LATEST} -t ${GHCR_TAG_MINOR} -t ${GHCR_TAG_MAJOR}"

        # Build and push to GitHub Container Registry
        docker buildx build --sbom=true --platform='linux/amd64,linux/arm64' --build-arg GIT_COMMIT_ID=${{ github.sha }} $TAGS --push --label "org.opencontainers.image.version"=$RELEASE_VERSION .
        
        DIGEST=$(docker buildx imagetools inspect ${GHCR_TAG} --format '{{ json .Manifest.Digest }}' | cut -d '"' -f 2)
        cosign sign --yes "${GHCR_TAG}@${DIGEST}"

        # Build unprivileged image
        GHCR_TAG_UNPRIVILEGED="ghcr.io/${{ github.repository_owner }}/vectorizer:${{ github.ref_name }}-unprivileged"
        GHCR_TAG_LATEST_UNPRIVILEGED="ghcr.io/${{ github.repository_owner }}/vectorizer:latest-unprivileged"
        GHCR_TAG_MINOR_UNPRIVILEGED="ghcr.io/${{ github.repository_owner }}/vectorizer:${MINOR_VERSION}-unprivileged"
        GHCR_TAG_MAJOR_UNPRIVILEGED="ghcr.io/${{ github.repository_owner }}/vectorizer:${MAJOR_VERSION}-unprivileged"
        TAGS_UNPRIVILEGED="-t ${GHCR_TAG_UNPRIVILEGED} -t ${GHCR_TAG_LATEST_UNPRIVILEGED} -t ${GHCR_TAG_MINOR_UNPRIVILEGED} -t ${GHCR_TAG_MAJOR_UNPRIVILEGED}"

        # Build and push unprivileged image
        docker buildx build --sbom=true --build-arg='USER_ID=1000' --platform='linux/amd64,linux/arm64' $TAGS_UNPRIVILEGED --push --label "org.opencontainers.image.version"=$RELEASE_VERSION .
        
        DIGEST=$(docker buildx imagetools inspect ${GHCR_TAG_UNPRIVILEGED} --format '{{ json .Manifest.Digest }}' | cut -d '"' -f 2)
        cosign sign --yes "${GHCR_TAG_UNPRIVILEGED}@${DIGEST}"
