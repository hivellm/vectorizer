name: Comprehensive Test Suite

on:
  push:
    branches: [ 'main', 'develop' ]
  pull_request:
    branches: [ 'main', 'develop' ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test type to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - api
          - performance
          - mcp
          - ci
          - benchmarks

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CI: true

jobs:
  # =============================================================================
  # UNIT TESTS - DISABLED TEMPORARILY
  # =============================================================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run unit tests
        run: ./scripts/run-tests.sh -t unit -v

      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: target/test-results/

  # =============================================================================
  # API TESTS
  # =============================================================================
  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run API tests
        run: ./scripts/run-tests.sh -t api -v

      - name: Upload API test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-results
          path: target/test-results/

  # =============================================================================
  # MCP TESTS
  # =============================================================================
  mcp-tests:
    name: MCP Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/Cargo.lock', '**/package-lock.json') }}

      - name: Install MCP test dependencies
        run: |
          cd examples/mcp
          npm install

      - name: Run MCP tests
        run: ./scripts/run-tests.sh -t mcp -v

      - name: Upload MCP test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mcp-test-results
          path: target/test-results/

  # =============================================================================
  # INTEGRATION TESTS
  # =============================================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run integration tests
        run: ./scripts/run-tests.sh -t integration -v

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: target/test-results/

  # =============================================================================
  # PERFORMANCE TESTS
  # =============================================================================
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.test_type == 'performance' || github.event.inputs.test_type == 'all'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run performance tests
        run: ./scripts/run-tests.sh -t performance -v

      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: target/test-results/

  # =============================================================================
  # BENCHMARKS
  # =============================================================================
  benchmarks:
    name: Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.test_type == 'benchmarks' || github.event.inputs.test_type == 'all'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run benchmarks
        run: ./scripts/run-tests.sh -t benchmarks -v

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: benchmark-results
          path: target/criterion/

  # =============================================================================
  # CI TESTS
  # =============================================================================
  ci-tests:
    name: CI Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run CI tests
        run: ./scripts/run-tests.sh -t ci -v

      - name: Upload CI test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ci-test-results
          path: target/test-results/

  # =============================================================================
  # TEST COVERAGE
  # =============================================================================
  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.test_type == 'all'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Generate coverage report
        run: ./scripts/run-tests.sh -t unit -c -v

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: target/tarpaulin/

  # =============================================================================
  # MULTI-PLATFORM TESTS
  # =============================================================================
  multi-platform-tests:
    name: Multi-Platform Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev pkg-config protobuf-compiler

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install protobuf

      - name: Install system dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install protoc

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests on ${{ matrix.os }}
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Windows doesn't support bash scripts, run cargo directly
            cargo test --lib --verbose
            cargo test --test api_comprehensive_tests --verbose
            cargo test --test mcp_tests --verbose
            cargo test --test integration_tests --verbose
          else
            ./scripts/run-tests.sh -t all -v
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}
          path: target/test-results/

  # =============================================================================
  # TEST SUMMARY
  # =============================================================================
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, api-tests, mcp-tests, integration-tests, ci-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test results
        uses: actions/download-artifact@v3
        with:
          path: test-results/

      - name: Generate test summary
        run: |
          echo "# Test Summary" > test-summary.md
          echo "" >> test-summary.md
          echo "## Test Results" >> test-summary.md
          echo "" >> test-summary.md
          
          # Check each test job
          if [ "${{ needs.unit-tests.result }}" == "success" ]; then
            echo "✅ Unit Tests: PASSED" >> test-summary.md
          else
            echo "❌ Unit Tests: FAILED" >> test-summary.md
          fi
          
          if [ "${{ needs.api-tests.result }}" == "success" ]; then
            echo "✅ API Tests: PASSED" >> test-summary.md
          else
            echo "❌ API Tests: FAILED" >> test-summary.md
          fi
          
          if [ "${{ needs.mcp-tests.result }}" == "success" ]; then
            echo "✅ MCP Tests: PASSED" >> test-summary.md
          else
            echo "❌ MCP Tests: FAILED" >> test-summary.md
          fi
          
          if [ "${{ needs.integration-tests.result }}" == "success" ]; then
            echo "✅ Integration Tests: PASSED" >> test-summary.md
          else
            echo "❌ Integration Tests: FAILED" >> test-summary.md
          fi
          
          if [ "${{ needs.ci-tests.result }}" == "success" ]; then
            echo "✅ CI Tests: PASSED" >> test-summary.md
          else
            echo "❌ CI Tests: FAILED" >> test-summary.md
          fi
          
          echo "" >> test-summary.md
          echo "## Test Coverage" >> test-summary.md
          echo "" >> test-summary.md
          echo "- Unit Tests: Comprehensive coverage of all modules" >> test-summary.md
          echo "- API Tests: Full REST API endpoint coverage" >> test-summary.md
          echo "- MCP Tests: Model Context Protocol integration" >> test-summary.md
          echo "- Integration Tests: End-to-end workflow validation" >> test-summary.md
          echo "- CI Tests: Build and deployment pipeline validation" >> test-summary.md
          
          cat test-summary.md

      - name: Upload test summary
        uses: actions/upload-artifact@v3
        with:
          name: test-summary
          path: test-summary.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('test-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # =============================================================================
  # NOTIFICATIONS
  # =============================================================================
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [unit-tests, api-tests, mcp-tests, integration-tests, ci-tests, test-summary]
    if: always()
    steps:
      - name: Notify success
        if: ${{ needs.unit-tests.result == 'success' && needs.api-tests.result == 'success' && needs.mcp-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.ci-tests.result == 'success' }}
        run: |
          echo "✅ All tests passed successfully!"
          echo "🚀 Vectorizer is ready for deployment"

      - name: Notify failure
        if: ${{ needs.unit-tests.result == 'failure' || needs.api-tests.result == 'failure' || needs.mcp-tests.result == 'failure' || needs.integration-tests.result == 'failure' || needs.ci-tests.result == 'failure' }}
        run: |
          echo "❌ Some tests failed"
          echo "Please check the logs for details"
          exit 1
