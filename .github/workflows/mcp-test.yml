name: MCP Integration Tests

# DISABLED - All workflows temporarily disabled due to errors
on:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_LOG: info

jobs:
  # =============================================================================
  # MCP SERVER TESTS - DISABLED TEMPORARILY
  # =============================================================================
  mcp-server-tests:
    name: MCP Server Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build MCP server
        run: cargo build --bin vectorizer-server --features full --verbose

      - name: Run MCP unit tests
        run: cargo test --lib mcp --verbose

      - name: Test MCP configuration
        run: |
          # Test MCP configuration loading
          cargo run --bin vectorizer-cli config validate --file config.example.yml

      - name: Test MCP server startup
        run: |
          # Test server startup with MCP enabled
          timeout 30s cargo run --bin vectorizer-server --features full -- --config config.example.yml &
          sleep 10
          
          # Check if server is running
          curl -f http://127.0.0.1:15001/health || exit 1
          curl -f http://127.0.0.1:15001/status || exit 1
          
          # Check MCP server status
          curl -f http://127.0.0.1:15001/status | grep -q "mcp" || exit 1

  # =============================================================================
  # MCP WEBSOCKET TESTS
  # =============================================================================
  mcp-websocket-tests:
    name: MCP WebSocket Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/Cargo.lock', '**/package-lock.json') }}

      - name: Install WebSocket test dependencies
        run: |
          npm init -y
          npm install ws

      - name: Build MCP server
        run: cargo build --bin vectorizer-server --features full --verbose

      - name: Start MCP server
        run: |
          cargo run --bin vectorizer-server --features full &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          sleep 15

      - name: Test WebSocket connection
        run: |
          node -e "
          const WebSocket = require('ws');
          
          const ws = new WebSocket('ws://127.0.0.1:15003/mcp');
          
          ws.on('open', () => {
            console.log('✅ MCP WebSocket connection established');
            
            // Test ping
            ws.send(JSON.stringify({
              jsonrpc: '2.0',
              method: 'ping',
              params: {}
            }));
          });
          
          ws.on('message', (data) => {
            const response = JSON.parse(data.toString());
            console.log('📨 Received MCP response:', response);
            
            if (response.result && response.result.pong) {
              console.log('✅ MCP ping successful');
              ws.close();
              process.exit(0);
            }
          });
          
          ws.on('error', (error) => {
            console.error('❌ MCP WebSocket error:', error);
            process.exit(1);
          });
          
          ws.on('close', () => {
            console.log('🔌 MCP WebSocket connection closed');
          });
          
          setTimeout(() => {
            console.error('⏰ MCP WebSocket connection timeout');
            process.exit(1);
          }, 10000);
          "

      - name: Test MCP tools via WebSocket
        run: |
          node -e "
          const WebSocket = require('ws');
          
          const ws = new WebSocket('ws://127.0.0.1:15003/mcp');
          
          ws.on('open', () => {
            console.log('✅ Testing MCP tools...');
            
            // Test tools/list
            ws.send(JSON.stringify({
              jsonrpc: '2.0',
              method: 'tools/list',
              params: {}
            }));
          });
          
          ws.on('message', (data) => {
            const response = JSON.parse(data.toString());
            console.log('📨 MCP tools response:', response);
            
            if (response.result && response.result.tools) {
              console.log('✅ MCP tools list successful');
              console.log('Available tools:', response.result.tools.map(t => t.name));
              ws.close();
              process.exit(0);
            }
          });
          
          ws.on('error', (error) => {
            console.error('❌ MCP tools test error:', error);
            process.exit(1);
          });
          
          setTimeout(() => {
            console.error('⏰ MCP tools test timeout');
            process.exit(1);
          }, 10000);
          "

      - name: Cleanup server
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi

  # =============================================================================
  # MCP AUTHENTICATION TESTS
  # =============================================================================
  mcp-auth-tests:
    name: MCP Authentication Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build MCP server
        run: cargo build --bin vectorizer-server --features full --verbose

      - name: Test MCP authentication
        run: |
          # Create test config with authentication enabled
          cat > test-mcp-config.yml << EOF
          server:
            host: "127.0.0.1"
            port: 15001
          mcp:
            enabled: true
            host: "127.0.0.1"
            port: 15003
            auth_required: true
            allowed_api_keys:
              - "test-api-key-123"
          EOF
          
          # Start server with auth enabled
          cargo run --bin vectorizer-server --features full -- --config test-mcp-config.yml &
          SERVER_PID=$!
          sleep 10
          
          # Test without API key (should fail)
          if curl -f http://127.0.0.1:15001/status; then
            echo "❌ Server should require authentication"
            kill $SERVER_PID
            exit 1
          fi
          
          # Test with API key (should succeed)
          if ! curl -f -H "X-API-Key: test-api-key-123" http://127.0.0.1:15001/status; then
            echo "❌ Server should accept valid API key"
            kill $SERVER_PID
            exit 1
          fi
          
          echo "✅ MCP authentication tests passed"
          kill $SERVER_PID

  # =============================================================================
  # MCP PERFORMANCE TESTS
  # =============================================================================
  mcp-performance-tests:
    name: MCP Performance Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            node_modules
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '**/package-lock.json') }}

      - name: Install performance test dependencies
        run: |
          npm init -y
          npm install ws autocannon

      - name: Build MCP server
        run: cargo build --release --bin vectorizer-server --features full --verbose

      - name: Start MCP server
        run: |
          cargo run --release --bin vectorizer-server --features full &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          sleep 10

      - name: Run HTTP API performance tests
        run: |
          # Test HTTP API performance
          autocannon -c 10 -d 30 -p 10 http://127.0.0.1:15001/health
          autocannon -c 10 -d 30 -p 10 http://127.0.0.1:15001/status
          autocannon -c 10 -d 30 -p 10 http://127.0.0.1:15001/collections

      - name: Run MCP WebSocket performance tests
        run: |
          node -e "
          const WebSocket = require('ws');
          
          const connections = [];
          const numConnections = 10;
          
          console.log('🚀 Starting MCP WebSocket performance test...');
          
          for (let i = 0; i < numConnections; i++) {
            const ws = new WebSocket('ws://127.0.0.1:15003/mcp');
            connections.push(ws);
            
            ws.on('open', () => {
              console.log(\`✅ Connection \${i + 1} established\`);
              
              // Send ping every second
              setInterval(() => {
                ws.send(JSON.stringify({
                  jsonrpc: '2.0',
                  method: 'ping',
                  params: {}
                }));
              }, 1000);
            });
            
            ws.on('error', (error) => {
              console.error(\`❌ Connection \${i + 1} error:\`, error);
            });
          }
          
          // Run for 30 seconds
          setTimeout(() => {
            console.log('⏰ Performance test completed');
            connections.forEach(ws => ws.close());
            process.exit(0);
          }, 30000);
          "

      - name: Cleanup server
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi

  # =============================================================================
  # MCP INTEGRATION WITH IDEs
  # =============================================================================
  mcp-ide-integration:
    name: MCP IDE Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            node_modules
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '**/package-lock.json') }}

      - name: Install MCP client dependencies
        run: |
          npm init -y
          npm install @modelcontextprotocol/sdk ws

      - name: Build MCP server
        run: cargo build --bin vectorizer-server --features full --verbose

      - name: Start MCP server
        run: |
          cargo run --bin vectorizer-server --features full &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          sleep 10

      - name: Test MCP client integration
        run: |
          node -e "
          const { Client } = require('@modelcontextprotocol/sdk/client/index.js');
          const { StdioClientTransport } = require('@modelcontextprotocol/sdk/client/stdio.js');
          
          console.log('🚀 Testing MCP client integration...');
          
          // Test MCP client connection
          const transport = new StdioClientTransport({
            command: 'node',
            args: ['-e', 'console.log(\"MCP client test\")']
          });
          
          const client = new Client({
            name: 'vectorizer-test-client',
            version: '1.0.0'
          }, {
            capabilities: {
              tools: {}
            }
          });
          
          client.connect(transport).then(() => {
            console.log('✅ MCP client connected successfully');
            return client.listTools();
          }).then((tools) => {
            console.log('✅ MCP tools listed:', tools.tools.map(t => t.name));
            client.close();
            process.exit(0);
          }).catch((error) => {
            console.error('❌ MCP client error:', error);
            process.exit(1);
          });
          "

      - name: Test MCP tool calls
        run: |
          node -e "
          const WebSocket = require('ws');
          
          const ws = new WebSocket('ws://127.0.0.1:15003/mcp');
          
          ws.on('open', () => {
            console.log('✅ Testing MCP tool calls...');
            
            // Test embed_text tool
            ws.send(JSON.stringify({
              jsonrpc: '2.0',
              method: 'tools/call',
              params: {
                name: 'embed_text',
                arguments: {
                  text: 'Hello, world!'
                }
              }
            }));
          });
          
          ws.on('message', (data) => {
            const response = JSON.parse(data.toString());
            console.log('📨 MCP tool call response:', response);
            
            if (response.result && response.result.embedding) {
              console.log('✅ MCP embed_text tool successful');
              console.log('Embedding dimension:', response.result.dimension);
              ws.close();
              process.exit(0);
            }
          });
          
          ws.on('error', (error) => {
            console.error('❌ MCP tool call error:', error);
            process.exit(1);
          });
          
          setTimeout(() => {
            console.error('⏰ MCP tool call timeout');
            process.exit(1);
          }, 10000);
          "

      - name: Cleanup server
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi

  # =============================================================================
  # MCP DOCUMENTATION TESTS
  # =============================================================================
  mcp-documentation-tests:
    name: MCP Documentation Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Test MCP documentation
        run: |
          # Check if MCP documentation exists
          test -f docs/MCP_INTEGRATION.md || (echo "❌ MCP documentation missing" && exit 1)
          test -f docs/MCP_TOOLS.md || (echo "❌ MCP tools documentation missing" && exit 1)
          
          # Check if MCP examples exist
          test -d examples/mcp || (echo "❌ MCP examples missing" && exit 1)
          
          echo "✅ MCP documentation tests passed"

      - name: Validate MCP configuration examples
        run: |
          # Test MCP configuration in config.example.yml
          cargo run --bin vectorizer-cli config validate --file config.example.yml
          
          # Check if MCP section exists in config
          grep -q "mcp:" config.example.yml || (echo "❌ MCP configuration missing" && exit 1)
          grep -q "enabled: true" config.example.yml || (echo "❌ MCP not enabled in config" && exit 1)
          
          echo "✅ MCP configuration validation passed"

  # =============================================================================
  # NOTIFICATIONS
  # =============================================================================
  notify-mcp-results:
    name: Notify MCP Test Results
    runs-on: ubuntu-latest
    needs: [mcp-server-tests, mcp-websocket-tests, mcp-auth-tests, mcp-performance-tests, mcp-ide-integration, mcp-documentation-tests]
    if: always()
    steps:
      - name: Notify MCP test success
        if: ${{ needs.mcp-server-tests.result == 'success' && needs.mcp-websocket-tests.result == 'success' && needs.mcp-auth-tests.result == 'success' && needs.mcp-performance-tests.result == 'success' && needs.mcp-ide-integration.result == 'success' && needs.mcp-documentation-tests.result == 'success' }}
        run: |
          echo "✅ All MCP integration tests passed!"
          echo "🚀 MCP server is ready for IDE integration"
          echo "📡 WebSocket endpoint: ws://127.0.0.1:15003/mcp"
          echo "🔧 Available tools: search_vectors, list_collections, embed_text, etc."

      - name: Notify MCP test failure
        if: ${{ needs.mcp-server-tests.result == 'failure' || needs.mcp-websocket-tests.result == 'failure' || needs.mcp-auth-tests.result == 'failure' || needs.mcp-performance-tests.result == 'failure' || needs.mcp-ide-integration.result == 'failure' || needs.mcp-documentation-tests.result == 'failure' }}
        run: |
          echo "❌ MCP integration tests failed"
          echo "Please check the logs for details"
          exit 1
