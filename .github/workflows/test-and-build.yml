name: Test and Build

on:
  push:
    branches: [ 'main', 'develop' ]
  pull_request:
    branches: [ 'main', 'develop' ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CI: true

jobs:
  test-and-build:
    name: Test and Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev pkg-config protobuf-compiler

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install protobuf

      - name: Install system dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install protoc

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Windows doesn't support bash scripts, run cargo directly
            cargo test --lib --verbose
            cargo test --test api_comprehensive_tests --verbose
            cargo test --test mcp_tests --verbose
            cargo test --test integration_tests --verbose
          else
            cargo test --lib --verbose
            cargo test --test api_comprehensive_tests --verbose
            cargo test --test mcp_tests --verbose
            cargo test --test integration_tests --verbose
          fi

      - name: Build project
        run: |
          cargo build --release --verbose

      - name: Verify binaries
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ls -la target/release/vectorizer-server.exe
            ls -la target/release/vectorizer-cli.exe
            ls -la target/release/vzr.exe
            ls -la target/release/vectorizer-mcp-server.exe
          else
            ls -la target/release/vectorizer-server
            ls -la target/release/vectorizer-cli
            ls -la target/release/vzr
            ls -la target/release/vectorizer-mcp-server
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.os }}
          path: target/release/

  # =============================================================================
  # RELEASE CREATION (only on tag push)
  # =============================================================================
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && contains(github.ref, '.')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev pkg-config protobuf-compiler

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build all binaries
        run: |
          cargo build --release --verbose

      - name: Create release archive
        run: |
          mkdir -p release
          
          # Copy binaries
          cp target/release/vectorizer-server release/
          cp target/release/vectorizer-cli release/
          cp target/release/vzr release/
          cp target/release/vectorizer-mcp-server release/
          
          # Copy configuration files
          cp vectorize-workspace.yml release/
          cp LICENSE release/
          
          # Create archive
          tar -czf vectorizer-${GITHUB_REF_NAME}-linux-x86_64.tar.gz -C release .
          
          # List contents
          ls -la vectorizer-${GITHUB_REF_NAME}-linux-x86_64.tar.gz
          tar -tzf vectorizer-${GITHUB_REF_NAME}-linux-x86_64.tar.gz

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Vectorizer ${{ github.ref_name }}
          body: |
            ## Vectorizer ${{ github.ref_name }}
            
            ### Pre-built Binaries
            - **Linux x86_64**: `vectorizer-${GITHUB_REF_NAME}-linux-x86_64.tar.gz`
            
            ### Installation
            1. Download the appropriate binary for your platform
            2. Extract the archive
            3. Run: `./scripts/start.sh --workspace vectorize-workspace.yml`
            
            ### What's New
            - Latest Vectorizer server and CLI
            - MCP server integration
            - Cross-platform support
            
            ### Files Included
            - `vectorizer-server` - Main server binary
            - `vectorizer-cli` - Command-line interface
            - `vzr` - Quick CLI tool
            - `vectorizer-mcp-server` - MCP server
            - `vectorize-workspace.yml` - Configuration file
            - `LICENSE` - License file
          files: |
            vectorizer-${GITHUB_REF_NAME}-linux-x86_64.tar.gz
          draft: false
          prerelease: false

  # =============================================================================
  # NOTIFICATIONS
  # =============================================================================
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test-and-build, release]
    if: always()
    
    steps:
      - name: Notify success
        if: ${{ needs.test-and-build.result == 'success' }}
        run: |
          echo "‚úÖ Tests and build completed successfully!"
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
            echo "üöÄ Release created successfully!"
          fi

      - name: Notify failure
        if: ${{ needs.test-and-build.result == 'failure' }}
        run: |
          echo "‚ùå Tests or build failed"
          echo "Please check the logs for details"
          exit 1
