name: Tag Release

on:
  push:
    tags:
      - 'v*.*.*'  # Only semantic version tags (e.g., v1.0.0, v0.22.0)

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # =============================================================================
  # VALIDATE TAG FORMAT
  # =============================================================================
  validate-tag:
    name: Validate Tag Format
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "clean_version=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "Tag: $VERSION"
          echo "Clean version: ${VERSION#v}"

      - name: Validate semantic version format
        run: |
          CLEAN_VERSION="${{ steps.version.outputs.clean_version }}"
          if [[ ! $CLEAN_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$ ]]; then
            echo "❌ Invalid semantic version format: $CLEAN_VERSION"
            echo "Expected format: X.Y.Z[-prerelease][+build]"
            exit 1
          fi
          echo "✅ Valid semantic version: $CLEAN_VERSION"

      - name: Check if version exists in Cargo.toml
        run: |
          CLEAN_VERSION="${{ steps.version.outputs.clean_version }}"
          if ! grep -q "version = \"$CLEAN_VERSION\"" Cargo.toml; then
            echo "⚠️  Warning: Version $CLEAN_VERSION not found in Cargo.toml"
            echo "Make sure to update version before creating the tag"
          else
            echo "✅ Version $CLEAN_VERSION found in Cargo.toml"
          fi

  # =============================================================================
  # BUILD FOR ALL PLATFORMS
  # =============================================================================
  build:
    name: Build ${{ matrix.os }} (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    needs: validate-tag
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: vectorizer-linux-x86_64
            executable_extension: ''
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: vectorizer-linux-aarch64
            executable_extension: ''
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: vectorizer-windows-x86_64
            executable_extension: '.exe'
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: vectorizer-windows-aarch64
            executable_extension: '.exe'
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: vectorizer-macos-x86_64
            executable_extension: ''
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: vectorizer-macos-aarch64
            executable_extension: ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build all binaries
        run: |
          cargo build --release --bin vectorizer-cli --target ${{ matrix.target }} --features full
          cargo build --release --bin vectorizer-server --target ${{ matrix.target }} --features full
          cargo build --release --bin vzr --target ${{ matrix.target }} --features full
          cargo build --release --bin vectorizer-mcp-server --target ${{ matrix.target }} --features full

      - name: Create release directory
        run: mkdir -p release/${{ matrix.artifact_name }}

      - name: Copy binaries
        run: |
          cp target/${{ matrix.target }}/release/vectorizer-cli${{ matrix.executable_extension }} release/${{ matrix.artifact_name }}/
          cp target/${{ matrix.target }}/release/vectorizer-server${{ matrix.executable_extension }} release/${{ matrix.artifact_name }}/
          cp target/${{ matrix.target }}/release/vzr${{ matrix.executable_extension }} release/${{ matrix.artifact_name }}/
          cp target/${{ matrix.target }}/release/vectorizer-mcp-server${{ matrix.executable_extension }} release/${{ matrix.artifact_name }}/

      - name: Copy configuration files
        run: |
          cp config.example.yml release/${{ matrix.artifact_name }}/config.yml
          cp vectorize-workspace.yml release/${{ matrix.artifact_name }}/
          cp README.md release/${{ matrix.artifact_name }}/
          cp LICENSE release/${{ matrix.artifact_name }}/

      - name: Create installation script (Linux/macOS)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          cat > release/${{ matrix.artifact_name }}/install.sh << 'EOF'
          #!/bin/bash
          echo "🚀 Installing Vectorizer ${{ github.ref_name }}..."
          
          # Create directories
          sudo mkdir -p /usr/local/bin
          sudo mkdir -p /etc/vectorizer
          
          # Copy binaries
          sudo cp vectorizer-cli /usr/local/bin/
          sudo cp vectorizer-server /usr/local/bin/
          sudo cp vzr /usr/local/bin/
          sudo cp vectorizer-mcp-server /usr/local/bin/
          
          # Copy config
          sudo cp config.yml /etc/vectorizer/
          
          # Set permissions
          sudo chmod +x /usr/local/bin/vectorizer-*
          
          echo "✅ Vectorizer ${{ github.ref_name }} installed successfully!"
          echo "📁 Binary location: /usr/local/bin/"
          echo "📁 Config location: /etc/vectorizer/"
          echo ""
          echo "🚀 Start Vectorizer:"
          echo "  ./scripts/start.sh --workspace vectorize-workspace.yml"
          echo ""
          echo "🔧 Use the CLI:"
          echo "  vectorizer-cli --help"
          EOF
          chmod +x release/${{ matrix.artifact_name }}/install.sh

      - name: Create installation script (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cat > release/${{ matrix.artifact_name }}/install.bat << 'EOF'
          @echo off
          echo 🚀 Installing Vectorizer ${{ github.ref_name }}...
          
          REM Create directories
          if not exist "C:\Program Files\Vectorizer" mkdir "C:\Program Files\Vectorizer"
          if not exist "C:\ProgramData\Vectorizer" mkdir "C:\ProgramData\Vectorizer"
          
          REM Copy binaries
          copy "vectorizer-cli.exe" "C:\Program Files\Vectorizer\"
          copy "vectorizer-server.exe" "C:\Program Files\Vectorizer\"
          copy "vzr.exe" "C:\Program Files\Vectorizer\"
          copy "vectorizer-mcp-server.exe" "C:\Program Files\Vectorizer\"
          
          REM Copy config
          copy "config.yml" "C:\ProgramData\Vectorizer\"
          
          REM Add to PATH
          setx PATH "%PATH%;C:\Program Files\Vectorizer" /M
          
          echo ✅ Vectorizer ${{ github.ref_name }} installed successfully!
          echo 📁 Binary location: C:\Program Files\Vectorizer\
          echo 📁 Config location: C:\ProgramData\Vectorizer\
          echo.
          echo 🚀 Start Vectorizer:
          echo   .\scripts\start.sh --workspace vectorize-workspace.yml
          echo.
          echo 🔧 Use the CLI:
          echo   vectorizer-cli --help
          pause
          EOF

      - name: Create archive (Linux/macOS)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          cd release/${{ matrix.artifact_name }}
          tar -czf ../${{ matrix.artifact_name }}.tar.gz .
          cd ../..
          ls -la release/

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd release/${{ matrix.artifact_name }}
          powershell Compress-Archive -Path * -DestinationPath ../${{ matrix.artifact_name }}.zip
          cd ../..
          dir release\

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: release/${{ matrix.artifact_name }}.*
          retention-days: 30

  # =============================================================================
  # CREATE GITHUB RELEASE
  # =============================================================================
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-tag, build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Get version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "clean_version=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Create release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          # 🚀 Vectorizer ${{ steps.version.outputs.version }}
          
          ## 📦 Downloads
          
          ### Linux
          - **x86_64**: [vectorizer-linux-x86_64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/vectorizer-linux-x86_64.tar.gz)
          - **aarch64**: [vectorizer-linux-aarch64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/vectorizer-linux-aarch64.tar.gz)
          
          ### Windows
          - **x86_64**: [vectorizer-windows-x86_64.zip](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/vectorizer-windows-x86_64.zip)
          - **aarch64**: [vectorizer-windows-aarch64.zip](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/vectorizer-windows-aarch64.zip)
          
          ### macOS
          - **x86_64**: [vectorizer-macos-x86_64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/vectorizer-macos-x86_64.tar.gz)
          - **aarch64**: [vectorizer-macos-aarch64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/vectorizer-macos-aarch64.tar.gz)
          
          ## 🛠️ Installation
          
          ### Linux/macOS
          ```bash
          # Download and extract
          wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/vectorizer-linux-x86_64.tar.gz
          tar -xzf vectorizer-linux-x86_64.tar.gz
          
          # Install system-wide (optional)
          sudo ./install.sh
          
          # Or run directly
          ./vectorizer-server --config config.yml
          ```
          
          ### Windows
          ```cmd
          REM Download and extract
          powershell -Command "Invoke-WebRequest -Uri 'https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/vectorizer-windows-x86_64.zip' -OutFile 'vectorizer-windows-x86_64.zip'"
          powershell -Command "Expand-Archive -Path 'vectorizer-windows-x86_64.zip' -DestinationPath 'vectorizer'"
          
          REM Install system-wide (run as Administrator)
          cd vectorizer
          install.bat
          
          REM Or run directly
          vectorizer-server.exe --config config.yml
          ```
          
          ## 🚀 Quick Start
          
          1. **Start the server:**
             ```bash
             vectorizer-server --config config.yml
             ```
          
          2. **Create a collection:**
             ```bash
             vectorizer-cli collections create --name documents --dimension 768
             ```
          
          3. **Insert documents:**
             ```bash
             vectorizer-cli documents insert --collection documents --file document.txt
             ```
          
          4. **Search:**
             ```bash
             vectorizer-cli search --collection documents --query "machine learning"
             ```
          
          ## 🔧 Features
          
          - ⚡ **High Performance**: Sub-3ms search times with optimized HNSW indexing
          - 🧠 **Multiple Embeddings**: TF-IDF, BM25, BERT, MiniLM, and custom models
          - 🌐 **REST API**: Complete HTTP API with authentication
          - 🔗 **MCP Integration**: Model Context Protocol for AI IDE integration
          - 📚 **Document Processing**: Intelligent chunking and indexing
          - 🔒 **Security**: API key authentication and secure communication
          
          ## 📖 Documentation
          
          - [Full Documentation](https://github.com/${{ github.repository }}/docs/)
          - [API Reference](https://github.com/${{ github.repository }}/docs/api/)
          - [Configuration Guide](https://github.com/${{ github.repository }}/docs/configuration/)
          
          ## 🤝 Support
          
          - [GitHub Issues](https://github.com/${{ github.repository }}/issues)
          - [Discussions](https://github.com/${{ github.repository }}/discussions)
          
          ---
          
          **Made with ❤️ by the Hive Vectorizer Team**
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Vectorizer ${{ steps.version.outputs.version }}
          body_path: release_notes.md
          files: |
            artifacts/vectorizer-linux-x86_64/vectorizer-linux-x86_64.tar.gz
            artifacts/vectorizer-linux-aarch64/vectorizer-linux-aarch64.tar.gz
            artifacts/vectorizer-windows-x86_64/vectorizer-windows-x86_64.zip
            artifacts/vectorizer-windows-aarch64/vectorizer-windows-aarch64.zip
            artifacts/vectorizer-macos-x86_64/vectorizer-macos-x86_64.tar.gz
            artifacts/vectorizer-macos-aarch64/vectorizer-macos-aarch64.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # =============================================================================
  # NOTIFY SUCCESS
  # =============================================================================
  notify:
    name: Notify Release Success
    runs-on: ubuntu-latest
    needs: [validate-tag, build, release]
    if: always()
    
    steps:
      - name: Notify success
        if: ${{ needs.release.result == 'success' }}
        run: |
          echo "🎉 Release ${{ github.ref_name }} created successfully!"
          echo "📦 All platform binaries are available for download"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"

      - name: Notify failure
        if: ${{ needs.release.result == 'failure' }}
        run: |
          echo "❌ Release creation failed"
          echo "Please check the logs for details"
          exit 1
