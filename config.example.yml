# Vectorizer Server Configuration File
# Updated for v0.28.1 - REST API architecture with MCP support
# Simplified deployment without complex dependencies

# =============================================================================
# FILE WATCHER CONFIGURATION
# =============================================================================
file_watcher:
  enabled: true
  debounce_delay_ms: 1000
  min_file_size_bytes: 1
  max_file_size_bytes: 10485760  # 10MB
  hash_validation_enabled: true
  collection_name: "workspace-files"

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================
server:
  # Basic server settings
  host: "127.0.0.1"          # Server bind address
  port: 15002                # Server port
  mcp_port: 15002            # MCP server port

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
logging:
  # Log levels
  level: "info"               # Global log level: error/warn/info/debug/trace
  format: "json"              # Log format: json/text
  
  # Request/Response logging
  log_requests: true          # Log all requests
  log_responses: false        # Log responses (can be verbose)
  log_errors: true            # Log errors
  
  # Correlation ID tracking
  correlation_id_enabled: true # Add correlation IDs to all requests

# =============================================================================
# MONITORING & TELEMETRY CONFIGURATION
# =============================================================================
monitoring:
  # Prometheus metrics
  prometheus:
    enabled: true             # Enable Prometheus metrics export
    endpoint: "/prometheus/metrics"  # Metrics endpoint path
    
  # System metrics collector
  system_metrics:
    enabled: true             # Enable periodic system metrics collection
    interval_secs: 15         # Collection interval in seconds
    
  # OpenTelemetry distributed tracing
  telemetry:
    enabled: false            # Enable OpenTelemetry tracing (requires OTLP collector)
    otlp_endpoint: "http://localhost:4317"  # OTLP gRPC endpoint
    service_name: "vectorizer"               # Service name in traces
    sampler: "always_on"      # Sampling strategy: always_on/always_off/parent_based
    
  # Metrics to track
  metrics:
    # Search metrics
    search_enabled: true      # Track search requests, latency, results
    
    # Indexing metrics
    indexing_enabled: true    # Track insert operations, vector/collection counts
    
    # Replication metrics
    replication_enabled: true # Track replication lag, bytes sent/received
    
    # System metrics
    system_enabled: true      # Track memory usage, cache hits, API errors

# =============================================================================
# DEFAULT COLLECTION CONFIGURATION
# =============================================================================
collections:
  defaults:
    # Vector settings
    dimension: 512            # Default vector dimension
    metric: "cosine"          # Default distance metric: cosine/euclidean/dot_product

    # Quantization (memory optimization)
    quantization:
      type: "sq"              # Quantization type: sq (scalar quantization)
      sq:
        bits: 8               # SQ bits per dimension

    # Embedding settings
    embedding:
      model: "bm25"     # Default embedding: bm25
      bow:
        vocab_size: 50000     # BOW vocabulary size
        max_sequence_length: 512 # Maximum sequence length
      hash:
        hash_size: 1000000    # Feature hash size
      ngram:
        ngram_range: [1, 3]   # N-gram range [min, max]
        vocab_size: 100000    # N-gram vocabulary size
      bm25:
        k1: 1.5               # BM25 k1 parameter
        b: 0.75               # BM25 b parameter

    # Index settings (HNSW)
    index:
      type: "hnsw"            # Index type: hnsw/optimized_hnsw
      hnsw:
        m: 16                 # HNSW connections per layer
        ef_construction: 200  # Construction search width
        ef_search: 64         # Query search width
      optimized_hnsw:
        batch_size: 1000      # Batch insertion size
        parallel: true        # Enable parallel construction
        initial_capacity: 100000  # Pre-allocation size
        max_connections: 16   # Maximum connections per layer
        max_connections_0: 32 # Connections for layer 0

# =============================================================================
# TRANSMUTATION DOCUMENT CONVERSION (v0.8.0)
# =============================================================================
transmutation:
  # Enable/disable transmutation document conversion
  enabled: true
  
  # Maximum file size for conversion (in MB)
  # Files larger than this will be skipped
  max_file_size_mb: 50
  
  # Conversion timeout (in seconds)
  # Conversions taking longer than this will be aborted
  conversion_timeout_secs: 300
  
  # Preserve images during conversion
  # Note: Requires additional dependencies (LibreOffice for DOCX images)
  preserve_images: false

# Supported formats when transmutation feature is enabled:
# - PDF (with page metadata) - 98x faster than Docling
# - DOCX (with page metadata) - Pure Rust
# - XLSX (as Markdown tables) - 148 pages/sec
# - PPTX (slides as pages) - 1639 pages/sec
# - HTML/HTM (clean Markdown) - 2110 pages/sec
# - XML (structured Markdown) - 2353 pages/sec
# - Images (JPG, JPEG, PNG, TIFF, TIF, BMP, GIF, WEBP) - Requires Tesseract OCR

# External dependencies (optional, for full format support):
# - Linux: sudo apt-get install poppler-utils tesseract-ocr
# - macOS: brew install poppler tesseract
# - Windows: choco install poppler tesseract

# Build with transmutation support:
# cargo build --release --features transmutation

# =============================================================================
# TEXT NORMALIZATION CONFIGURATION
# =============================================================================
normalization:
  # Enable/disable text normalization globally
  enabled: true
  
  # Normalization level: conservative/moderate/aggressive
  # - conservative: Only fixes line endings (CRLF -> LF), preserves structure
  # - moderate: Collapses whitespace, normalizes unicode, fixes line endings
  # - aggressive: All moderate + removes extra spaces, normalizes quotes
  level: "conservative"
  
  # Line ending normalization
  line_endings:
    normalize_crlf: true          # Normalize CRLF to LF
    normalize_cr: true            # Normalize CR to LF
    collapse_multiple_newlines: true  # Collapse 3+ newlines to 2
    trim_trailing_whitespace: true    # Remove trailing spaces from lines
  
  # Content-specific normalization
  content_detection:
    enabled: true                 # Auto-detect content type (code/text/markdown)
    preserve_code_structure: true # Don't normalize indentation in code blocks
    preserve_markdown_format: true # Preserve markdown formatting
  
  # Normalization cache
  cache:
    enabled: true                 # Enable normalization result caching
    max_entries: 10000            # Maximum cache entries
    ttl_seconds: 3600             # Cache entry TTL (1 hour)
  
  # Apply normalization at different stages
  stages:
    on_file_read: true            # Normalize when reading files
    on_chunk_creation: true       # Normalize when creating chunks
    on_payload_return: true       # Normalize when returning payloads
    on_cache_load: true           # Normalize when loading from cache

# =============================================================================
# PERFORMANCE OPTIMIZATION CONFIGURATION
# =============================================================================
performance:
  # CPU optimization settings
  cpu:
    max_threads: 8                # Maximum CPU threads for parallel operations
    enable_simd: true             # Enable SIMD optimizations
    memory_pool_size_mb: 1024     # Memory pool size for allocations
  
  # Batch processing
  batch:
    default_size: 100             # Default batch size for operations
    max_size: 1000                # Maximum batch size
    parallel_processing: true     # Enable parallel batch processing
  
  # Query result caching
  query_cache:
    enabled: true                 # Enable LRU query result caching
    max_size: 1000                # Maximum number of cached queries
    ttl_seconds: 300              # Cache entry TTL (5 minutes)
    warmup_enabled: false         # Enable cache warmup on startup

# =============================================================================
# WORKSPACE CONFIGURATION
# =============================================================================
workspace:
  # Enable workspace functionality
  enabled: true
  
  # Default workspace file
  default_workspace_file: "./vectorize-workspace.yml"

# =============================================================================
# API CONFIGURATION
# =============================================================================
api:
  # REST API settings
  rest:
    enabled: true                 # Enable REST API
    cors_enabled: true            # Enable CORS
    max_request_size_mb: 10       # Maximum request size
    timeout_seconds: 30           # Request timeout
  
  # MCP (Model Context Protocol) settings
  mcp:
    enabled: true                 # Enable MCP server
    port: 15002                   # MCP server port
    max_connections: 100          # Maximum concurrent connections

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================
security:
  # Rate limiting
  rate_limiting:
    enabled: true                 # Enable rate limiting
    requests_per_second: 100      # Requests per second per API key
    burst_size: 200               # Allow burst up to this size
    
  # TLS/mTLS
  tls:
    enabled: false                # Enable TLS (requires certificate files)
    cert_path: ""                 # Path to TLS certificate
    key_path: ""                  # Path to TLS private key
    mtls_enabled: false           # Enable mutual TLS (client certificates)
    client_ca_path: ""            # Path to client CA certificate
    
  # Audit logging
  audit:
    enabled: true                 # Enable audit logging
    max_entries: 10000            # Maximum audit log entries in memory
    log_auth_attempts: true       # Log all authentication attempts
    log_failed_requests: true     # Log failed requests
    log_admin_actions: true       # Log administrative actions
    
  # Role-Based Access Control (RBAC)
  rbac:
    enabled: false                # Enable RBAC (requires role assignments)
    default_role: "Viewer"        # Default role for new API keys
    # Available roles: Viewer, Editor, Admin
    # Viewer: Read-only access
    # Editor: Read/write access (no admin)
    # Admin: Full access including configuration

# =============================================================================
# REPLICATION CONFIGURATION (Master-Replica Architecture)
# =============================================================================
replication:
  # Enable/disable replication
  enabled: false
  
  # Node role in replication topology
  # - standalone: No replication (default)
  # - master: Accepts writes, replicates to replicas
  # - replica: Read-only, receives from master
  role: "standalone"
  
  # Master node settings (role=master)
  # bind_address: "0.0.0.0:7001"  # TCP address for replicas to connect
  
  # Replica node settings (role=replica)
  # master_address: "127.0.0.1:7001"  # Master address to connect to
  
  # Heartbeat interval (seconds)
  heartbeat_interval_secs: 5
  
  # Replica timeout (seconds)
  # Replicas are disconnected if no heartbeat received within this time
  replica_timeout_secs: 30
  
  # Replication log size (number of operations)
  # Circular buffer for incremental sync (Redis-style)
  # Default: 1M operations (~240MB for typical operations)
  log_size: 1000000
  
  # Auto-reconnect interval for replicas (seconds)
  reconnect_interval_secs: 5

# =============================================================================
# REPLICATION EXAMPLES
# =============================================================================
# 
# Example 1: Master Configuration
# --------------------------------
# replication:
#   enabled: true
#   role: "master"
#   bind_address: "0.0.0.0:7001"
#   heartbeat_interval_secs: 5
#   log_size: 1000000
#
# Example 2: Replica Configuration
# ---------------------------------
# replication:
#   enabled: true
#   role: "replica"
#   master_address: "192.168.1.10:7001"
#   reconnect_interval_secs: 5
#
# Example 3: Docker Compose Deployment
# -------------------------------------
# services:
#   vectorizer-master:
#     image: vectorizer:latest
#     environment:
#       - REPLICATION_ROLE=master
#       - REPLICATION_BIND_ADDRESS=0.0.0.0:7001
#     ports:
#       - "15002:15002"  # REST API
#       - "7001:7001"    # Replication
#
#   vectorizer-replica-1:
#     image: vectorizer:latest
#     environment:
#       - REPLICATION_ROLE=replica
#       - REPLICATION_MASTER_ADDRESS=vectorizer-master:7001
#     ports:
#       - "15003:15002"
#
# For more information, see docs/REPLICATION.md