[package]
name = "vectorizer"
version = "1.2.1"
edition = "2024"
authors = ["HiveLLM Contributors"]
description = "High-performance, in-memory vector database written in Rust"
license = "MIT"
repository = "https://github.com/hivellm/vectorizer"
keywords = ["vector-database", "semantic-search", "embeddings", "hnsw", "similarity-search"]
categories = ["database", "science"]

[dependencies]
ctrlc = { version = "3.4", optional = true }
# Core dependencies
tokio = { version = "1.47", features = ["full"] }
axum = { version = "0.8", features = ["ws", "json"] }
tower = "0.5"
tower-http = { version = "0.6", features = ["cors", "trace", "fs"] }
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
serde_yaml = "0.9"
bincode = "1.3"
glob = "0.3"
chrono = { version = "0.4", features = ["serde"] }
sha2 = "0.10"
walkdir = "2.5"
notify = "8.2"
fastrand = "2.3"
sysinfo = "0.37"
async-trait = "0.1"
futures-util = "0.3"

# Index and vector operations
hnsw_rs = "0.3"

# Intelligent search dependencies
tantivy = "0.25"  # BM25 full-text search engine
rrf = "0.1"       # Reciprocal Rank Fusion
fastembed = { version = "5.2", optional = true } # Embeddings + cross-encoder reranking (requires ONNX Runtime)
rust-tfidf = "1.1" # TF-IDF similarity fallback

# BERT model dependencies
candle-core = { version = "0.9.1", optional = true }
candle-nn = { version = "0.9.1", optional = true }
candle-transformers = { version = "0.9.1", optional = true }
tokenizers = { version = "0.22.1", optional = true }

# Linear algebra for basic matrix operations
ndarray = "0.16"

# GPU acceleration via external hive-gpu crate only
hive-gpu = { version = "0.1.6", optional = true }

# Parallel processing
rayon = "1.10"
crossbeam = "0.8"
num_cpus = "1.16"

# Memory analysis
memory-stats = "1.0"

# Data structures
dashmap = "6.1"
parking_lot = "0.12"
once_cell = "1.20"
arc-swap = "1.7"

# Error handling and logging
anyhow = { version = "1.0", features = ["backtrace"] }
thiserror = "2.0"
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
scopeguard = "1.2"

# CLI
clap = { version = "4.5", features = ["derive"] }
tar = "0.4"
flate2 = "1.0"

# HTTP client for status checks (using rustls for musl compatibility)
reqwest = { version = "0.12", features = ["json", "rustls-tls"], default-features = false }

# UMICP protocol integration (v0.2.3 with native JSON types + tool discovery)
umicp-core = { version = "0.2.3", features = ["http2", "websocket"] }

# System utilities
whoami = "1.5"
libc = "0.2"

# Benchmark dependencies
toml = "0.8"

# Compression and caching
lz4_flex = "0.11"
memmap2 = "0.9"
xxhash-rust = { version = "0.8", features = ["xxh3"] }
zstd = "0.13"
zip = { version = "6.0", features = ["zstd", "deflate"] }
crc32fast = "1.4" # For replication checksums

# Text normalization dependencies
blake3 = "1.5"
unicode-normalization = "0.1"
regex = "1.10"

# Authentication and security
jsonwebtoken = { version = "10.1", features = ["rust_crypto"] }
uuid = { version = "1.18", features = ["v4", "serde"] }
rand = "0.9"
lazy_static = "1.4"
tower_governor = "0.5"  # Rate limiting middleware
governor = "0.6"        # Rate limiting core
rustls = "0.23"         # TLS support
tokio-rustls = "0.26"   # Tokio TLS integration
rcgen = "0.13"          # Certificate generation for testing

# CLI utilities
sys-info = "0.9"

# MCP (Model Context Protocol) dependencies
tokio-tungstenite = "0.28"
tokio-stream = { version = "0.1", features = ["sync"] }

# Qdrant protocol support (using local models)

# Optional ML dependencies
hf-hub = { version = "0.4.3", optional = true }

# ONNX Runtime for high-performance inference
ort = { version = "2.0.0-rc.10", optional = true, features = ["half"] }

# Additional serialization formats
arrow = { version = "56", optional = true }
parquet = { version = "56", optional = true }

# MCP SDK
rmcp = { version = "0.8.1", features = ["server", "macros", "transport-streamable-http-server"] }
tokio-util = "0.7"
lru = "0.16.1"
hyper = { version = "1.7", features = ["server", "http1", "http2"] }
hyper-util = { version = "0.1", features = ["tokio", "server", "server-auto"] }

# Monitoring and Observability
prometheus = "0.13"
opentelemetry = { version = "0.27", features = ["metrics", "trace"] }
opentelemetry_sdk = { version = "0.27", features = ["metrics", "trace", "rt-tokio"] }
opentelemetry-prometheus = "0.17"
opentelemetry-otlp = { version = "0.27", features = ["metrics", "trace", "tokio", "grpc-tonic"] }
tracing-opentelemetry = "0.28"

# Transmutation - Document conversion engine (optional)
transmutation = { version = "0.1.2", optional = true, features = ["office", "pdf-to-image"] }

# Benchmark dependencies (optional, only with --features benchmarks)
criterion = { version = "0.5", features = ["html_reports", "async_tokio"], optional = true }
proptest = { version = "1.4", optional = true }

[build-dependencies]
cc = { version = "1.2", features = ["parallel"] }
winres = "0.1"
num_cpus = "1.16"  # For build script parallelism detection

[dev-dependencies]
tempfile = "3.8"
reqwest = { version = "0.12", features = ["json"] }

# Core operation benchmarks
[[bench]]
name = "query_cache_bench"
path = "benchmark/core/query_cache_bench.rs"
harness = false
required-features = ["benchmarks"]

[[bench]]
name = "update_bench"
path = "benchmark/core/update_bench.rs"
harness = false
required-features = ["benchmarks"]

[[bench]]
name = "core_operations_bench"
path = "benchmark/core/core_operations_benchmark.rs"
harness = false
required-features = ["benchmarks"]

[[bench]]
name = "cache_bench"
path = "benchmark/core/cache_benchmark.rs"
harness = false
required-features = ["benchmarks"]

# Replication benchmarks
[[bench]]
name = "replication_bench"
path = "benchmark/replication/replication_bench.rs"
harness = false
required-features = ["benchmarks"]

# GPU acceleration benchmarks
[[bench]]
name = "gpu_bench"
path = "benchmark/gpu/gpu_benchmark.rs"
harness = false
required-features = ["benchmarks"]

[[bench]]
name = "metal_hnsw_search_bench"
path = "benchmark/gpu/metal_hnsw_search_benchmark.rs"
harness = false
required-features = ["benchmarks", "hive-gpu-metal"]


[[bench]]
name = "cuda_bench"
path = "benchmark/gpu/cuda_benchmark.rs"
harness = false
required-features = ["benchmarks", "hive-gpu-cuda"]

# Storage benchmarks
[[bench]]
name = "storage_bench"
path = "benchmark/storage/storage_benchmark.rs"
harness = false
required-features = ["benchmarks"]

# Quantization benchmarks
[[bench]]
name = "quantization_bench"
path = "benchmark/quantization/quantization_benchmark.rs"
harness = false
required-features = ["benchmarks"]

# Embedding benchmarks
[[bench]]
name = "embeddings_bench"
path = "benchmark/embeddings/benchmark_embeddings.rs"
harness = false
required-features = ["benchmarks", "fastembed"]

# Search benchmarks
[[bench]]
name = "search_bench"
path = "benchmark/search/search_bench.rs"
harness = false
required-features = ["benchmarks"]

# Performance benchmarks
[[bench]]
name = "scale_bench"
path = "benchmark/performance/scale_benchmark.rs"
harness = false
required-features = ["benchmarks"]

[[bench]]
name = "large_scale_bench"
path = "benchmark/performance/large_scale_benchmark.rs"
harness = false
required-features = ["benchmarks"]

[[bench]]
name = "combined_optimization_bench"
path = "benchmark/performance/combined_optimization_benchmark.rs"
harness = false
required-features = ["benchmarks"]

# Example benchmark using helper utilities
[[bench]]
name = "example_benchmark"
path = "benchmark/example_benchmark.rs"
harness = false
required-features = ["benchmarks"]

# Simple test
[[bench]]
name = "simple_test"
path = "benchmark/simple_test.rs"
harness = false
required-features = ["benchmarks"]

# Minimal benchmark
[[bench]]
name = "minimal_benchmark"
path = "benchmark/minimal_benchmark.rs"
harness = false
required-features = ["benchmarks"]

# Disabled benchmarks - need refactoring for current API
# [[bin]]
# name = "benchmark_embeddings"
# path = "benchmark/scripts/benchmark_embeddings.rs"
# required-features = ["benchmarks"]
#
# [[bin]]
# name = "gpu_benchmark"
# path = "benchmark/scripts/gpu_benchmark.rs"
# required-features = ["benchmarks"]
#
# [[bin]]
# name = "quantization_benchmark"
# path = "benchmark/scripts/quantization_benchmark.rs"
# required-features = ["benchmarks"]
#
# [[bin]]
# name = "core_operations_benchmark"
# path = "benchmark/scripts/core_operations_benchmark.rs"
# required-features = ["benchmarks"]
#
# [[bin]]
# name = "dimension_comparison_benchmark"
# path = "benchmark/scripts/dimension_comparison_benchmark.rs"
# required-features = ["benchmarks"]
#
# [[bin]]
# name = "combined_optimization_benchmark"
# path = "benchmark/scripts/combined_optimization_benchmark.rs"
# required-features = ["benchmarks"]
#
# [[bin]]
# name = "scale_benchmark"
# path = "benchmark/scripts/scale_benchmark.rs"
# required-features = ["benchmarks"]
#
# [[bin]]
# name = "patched_benchmark"
# path = "benchmark/scripts/patched_benchmark.rs"
# required-features = ["benchmarks"]
#
# [[bin]]
# name = "large_scale_benchmark"
# path = "benchmark/scripts/large_scale_benchmark.rs"
# required-features = ["benchmarks"]

# [[bin]]
# name = "storage_benchmark"
# path = "benchmark/scripts/storage_benchmark.rs"
# required-features = ["benchmarks"]

# [[bin]]
# name = "diagnostic_benchmark"
# path = "benchmark/scripts/diagnostic_benchmark.rs"
# required-features = ["benchmarks"]

[[bin]]
name = "vectorizer-cli"
path = "src/bin/vectorizer-cli.rs"

[[bin]]
name = "vectorizer"
path = "src/bin/vectorizer.rs"

[[bin]]
name = "dimension_comparison_benchmark"
path = "benchmark/performance/dimension_comparison_benchmark.rs"
required-features = ["benchmarks"]

# [[bin]]
# name = "test_basic_metal"
# path = "benchmark/scripts/test_basic_metal.rs"
# required-features = ["benchmarks", "hive-gpu"]

# [[bin]]
# name = "metal_native_search_benchmark"
# path = "benchmark/scripts/metal_native_search_benchmark.rs"
# required-features = ["hive-gpu-metal"]

# [[bin]]
# name = "metal_hnsw_search_benchmark"
# path = "benchmark/scripts/metal_hnsw_search_benchmark.rs"
# required-features = ["benchmarks", "hive-gpu"]

# [[bin]]
# name = "simple_metal_test"
# path = "benchmark/scripts/simple_metal_test.rs"
# required-features = ["benchmarks", "hive-gpu"]

# [[bin]]
# name = "gpu_scale_benchmark"
# path = "benchmark/scripts/gpu_scale_benchmark.rs"
# required-features = ["hive-gpu-wgpu"]

[features]
# SAFE DEFAULTS - No GPU, minimal features to prevent BSODs on Windows
# Use --features "gpu,fastembed" to enable advanced features
default = []

# Optional features (require explicit opt-in)
fastembed = ["dep:fastembed"]

# GPU acceleration via external hive-gpu crate only
# WARNING: Can cause BSODs on Windows with outdated drivers
# Only enable if you have latest GPU drivers installed
hive-gpu = ["dep:hive-gpu"]
hive-gpu-metal = ["hive-gpu", "hive-gpu/metal-native"]
hive-gpu-cuda = ["hive-gpu", "hive-gpu/cuda"]
hive-gpu-wgpu = ["hive-gpu", "hive-gpu/wgpu"]

# Legacy features (deprecated - redirected to hive-gpu)
metal-native = ["hive-gpu-metal"]
cuda = ["hive-gpu-cuda"]
gpu-accel = ["hive-gpu-metal"]

# Convenience feature sets
gpu-safe = ["fastembed"]  # Fastembed only, no GPU drivers
gpu-full = ["hive-gpu", "fastembed"]  # All GPU features (risky on Windows)

# Benchmark feature - isolates benchmark dependencies from core builds
benchmarks = ["dep:criterion", "dep:proptest"]
candle-core = ["dep:candle-core"]
candle-nn = ["dep:candle-nn"]
candle-transformers = ["dep:candle-transformers"]
tokenizers = ["dep:tokenizers"]
hf-hub = ["dep:hf-hub"]
ort = ["dep:ort"]
arrow = ["dep:arrow"]
parquet = ["dep:parquet", "arrow"]
real-models = [
    "tokenizers",
    "hf-hub"
]
onnx-models = [
    "ort",
    "tokenizers",
    "hf-hub"
]
candle-models = [
    "candle-core",
    "candle-nn",
    "candle-transformers",
    "tokenizers",
    "hf-hub"
]
transmutation = ["dep:transmutation"]
full = ["real-models", "onnx-models", "arrow", "parquet", "transmutation"]



# [[bin]]
# name = "gpu_scale_benchmark"
# path = "benchmark/scripts/gpu_scale_benchmark.rs"
# required-features = ["wgpu-gpu"]
#
# [[bin]]
# name = "cache_benchmark"
# path = "benchmark/scripts/cache_benchmark.rs"
# required-features = ["benchmarks"]
#
# [[bin]]
# name = "complete_normalization_benchmark"
# path = "benchmark/scripts/complete_normalization_benchmark.rs"
# required-features = ["benchmarks"]

# =============================================================================
# WORKSPACE LINTS (Based on Qdrant standards)
# =============================================================================
[lints.clippy]
cast_lossless = "warn"
doc_link_with_quotes = "warn"
enum_glob_use = "warn"
explicit_into_iter_loop = "warn"
filter_map_next = "warn"
flat_map_option = "warn"
from_iter_instead_of_collect = "warn"
implicit_clone = "warn"
inconsistent_struct_constructor = "warn"
inefficient_to_string = "warn"
manual_is_variant_and = "warn"
manual_let_else = "warn"
needless_continue = "warn"
needless_raw_string_hashes = "warn"
ptr_as_ptr = "warn"
ref_option_ref = "warn"
uninlined_format_args = "warn"
unnecessary_wraps = "warn"
unused_self = "warn"
used_underscore_binding = "warn"
match_wildcard_for_single_variants = "warn"
needless_pass_by_ref_mut = "warn"

[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }

[lints.rustdoc]
private_intra_doc_links = "allow"

# =============================================================================
# RELEASE PROFILES
# =============================================================================
[profile.release]
lto = "fat"
codegen-units = 1
opt-level = 3

# Faster builds for CI
[profile.ci]
inherits = "release"
debug-assertions = true
lto = false
opt-level = 0

# Performance testing profile
[profile.perf]
inherits = "release"
lto = false
opt-level = 3
codegen-units = 256

[profile.dev]
debug = "line-tables-only"

# Safe profile for Windows builds (prevents BSODs)
[profile.safe]
inherits = "dev"
codegen-units = 1  # Single-threaded codegen
incremental = false
opt-level = 0
debug = "line-tables-only"

# Safe test profile (single-threaded, minimal parallelism)
[profile.test-safe]
inherits = "test"
codegen-units = 1
opt-level = 0
debug = "line-tables-only"

# =============================================================================
# DEBIAN PACKAGE METADATA
# =============================================================================
[package.metadata.deb]
maintainer = "HiveLLM Contributors <info@hivellm.org>"
depends = "$auto"
license-file = ["LICENSE", "0"]
section = "database"
priority = "optional"
extended-description = """\
Vectorizer is a high-performance vector database and search engine built in Rust. \
It provides semantic search, document indexing, and AI-powered applications support \
with sub-3ms search times and comprehensive embedding model support.\
"""
assets = [
    ["target/release/vectorizer", "usr/bin/", "755"],
    ["target/release/vectorizer-cli", "usr/bin/", "755"],
    ["README.md", "usr/share/doc/vectorizer/README", "644"],
    ["config.yml", "etc/vectorizer/config.yml", "644"],
    ["config.example.yml", "etc/vectorizer/", "644"],
    ["vectorize-workspace.example.yml", "etc/vectorizer/", "644"],
    ["dashboard/index.html", "usr/share/vectorizer/dashboard/", "644"],
    ["dashboard/app.js", "usr/share/vectorizer/dashboard/", "644"],
    ["dashboard/api-client.js", "usr/share/vectorizer/dashboard/", "644"],
    ["dashboard/search-function.js", "usr/share/vectorizer/dashboard/", "644"],
    ["dashboard/styles.css", "usr/share/vectorizer/dashboard/", "644"],
    ["dashboard/favicon.ico", "usr/share/vectorizer/dashboard/", "644"],
    ["dashboard/icon.png", "usr/share/vectorizer/dashboard/", "644"],
]
conf-files = ["/etc/vectorizer/config.yml"]
maintainer-scripts = "debian/"
systemd-units = { unit-name = "vectorizer", enable = false }
