// This file is @generated by prost-build.
/// Mensagens de busca
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchRequest {
    #[prost(string, tag = "1")]
    pub collection: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub query: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub limit: i32,
    #[prost(float, optional, tag = "4")]
    pub threshold: ::core::option::Option<f32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchResult {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub content: ::prost::alloc::string::String,
    #[prost(float, tag = "3")]
    pub score: f32,
    #[prost(map = "string, string", tag = "4")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchResponse {
    #[prost(message, repeated, tag = "1")]
    pub results: ::prost::alloc::vec::Vec<SearchResult>,
    #[prost(int32, tag = "2")]
    pub total_found: i32,
    #[prost(double, tag = "3")]
    pub search_time_ms: f64,
}
/// Mensagens de coleções
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Empty {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CollectionInfo {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub vector_count: i32,
    #[prost(int32, tag = "3")]
    pub document_count: i32,
    #[prost(int32, tag = "4")]
    pub dimension: i32,
    #[prost(string, tag = "5")]
    pub similarity_metric: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub last_updated: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "8")]
    pub error_message: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListCollectionsResponse {
    #[prost(message, repeated, tag = "1")]
    pub collections: ::prost::alloc::vec::Vec<CollectionInfo>,
    #[prost(int32, tag = "2")]
    pub total_collections: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCollectionInfoRequest {
    #[prost(string, tag = "1")]
    pub collection_name: ::prost::alloc::string::String,
}
/// Mensagens para criação e exclusão de coleções
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateCollectionRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub dimension: i32,
    #[prost(string, tag = "3")]
    pub similarity_metric: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub hnsw_config: ::core::option::Option<HnswConfig>,
    #[prost(message, optional, tag = "5")]
    pub compression_config: ::core::option::Option<CompressionConfig>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateCollectionResponse {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub dimension: i32,
    #[prost(string, tag = "3")]
    pub similarity_metric: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteCollectionRequest {
    #[prost(string, tag = "1")]
    pub collection_name: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteCollectionResponse {
    #[prost(string, tag = "1")]
    pub collection_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub message: ::prost::alloc::string::String,
}
/// Mensagens para operações de vetores
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TextData {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub text: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "3")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InsertTextsRequest {
    #[prost(string, tag = "1")]
    pub collection: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub texts: ::prost::alloc::vec::Vec<TextData>,
    #[prost(string, tag = "3")]
    pub provider: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InsertTextsResponse {
    #[prost(string, tag = "1")]
    pub collection: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub inserted_count: i32,
    #[prost(string, tag = "3")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteVectorsRequest {
    #[prost(string, tag = "1")]
    pub collection: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "2")]
    pub vector_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteVectorsResponse {
    #[prost(string, tag = "1")]
    pub collection: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub deleted_count: i32,
    #[prost(string, tag = "3")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetVectorRequest {
    #[prost(string, tag = "1")]
    pub collection: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub vector_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetVectorResponse {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(float, repeated, tag = "2")]
    pub data: ::prost::alloc::vec::Vec<f32>,
    #[prost(map = "string, string", tag = "3")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(string, tag = "4")]
    pub collection: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub status: ::prost::alloc::string::String,
}
/// Configurações
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HnswConfig {
    #[prost(int32, tag = "1")]
    pub m: i32,
    #[prost(int32, tag = "2")]
    pub ef_construction: i32,
    #[prost(int32, tag = "3")]
    pub ef_search: i32,
    #[prost(int32, tag = "4")]
    pub seed: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CompressionConfig {
    #[prost(bool, tag = "1")]
    pub enabled: bool,
    #[prost(int32, tag = "2")]
    pub threshold_bytes: i32,
    #[prost(string, tag = "3")]
    pub algorithm: ::prost::alloc::string::String,
}
/// Mensagens de embedding
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EmbedRequest {
    #[prost(string, tag = "1")]
    pub text: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub provider: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EmbedResponse {
    #[prost(float, repeated, tag = "1")]
    pub embedding: ::prost::alloc::vec::Vec<f32>,
    #[prost(int32, tag = "2")]
    pub dimension: i32,
    #[prost(string, tag = "3")]
    pub provider: ::prost::alloc::string::String,
}
/// Mensagens de indexação
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IndexingStatus {
    #[prost(string, tag = "1")]
    pub collection_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub status: ::prost::alloc::string::String,
    #[prost(float, tag = "3")]
    pub progress: f32,
    #[prost(int32, tag = "4")]
    pub vector_count: i32,
    #[prost(string, optional, tag = "5")]
    pub error_message: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "6")]
    pub last_updated: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IndexingProgressResponse {
    #[prost(message, repeated, tag = "1")]
    pub collections: ::prost::alloc::vec::Vec<IndexingStatus>,
    #[prost(bool, tag = "2")]
    pub is_indexing: bool,
    #[prost(string, tag = "3")]
    pub overall_status: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateIndexingProgressRequest {
    #[prost(string, tag = "1")]
    pub collection_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub status: ::prost::alloc::string::String,
    #[prost(float, tag = "3")]
    pub progress: f32,
    #[prost(int32, tag = "4")]
    pub vector_count: i32,
    #[prost(string, optional, tag = "5")]
    pub error_message: ::core::option::Option<::prost::alloc::string::String>,
}
/// Mensagens de health check
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HealthResponse {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub service: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub version: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub timestamp: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "5")]
    pub error_message: ::core::option::Option<::prost::alloc::string::String>,
}
/// Mensagens de sumarização
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SummarizeTextRequest {
    #[prost(string, tag = "1")]
    pub text: ::prost::alloc::string::String,
    /// extractive, abstractive, keyword, sentence
    #[prost(string, tag = "2")]
    pub method: ::prost::alloc::string::String,
    /// Maximum summary length
    #[prost(int32, optional, tag = "3")]
    pub max_length: ::core::option::Option<i32>,
    /// Compression ratio (0.1-0.9)
    #[prost(float, optional, tag = "4")]
    pub compression_ratio: ::core::option::Option<f32>,
    /// Language code (en, pt, es, etc.)
    #[prost(string, optional, tag = "5")]
    pub language: ::core::option::Option<::prost::alloc::string::String>,
    /// Additional metadata
    #[prost(map = "string, string", tag = "6")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SummarizeTextResponse {
    #[prost(string, tag = "1")]
    pub summary_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub original_text: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub summary: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub method: ::prost::alloc::string::String,
    #[prost(int32, tag = "5")]
    pub original_length: i32,
    #[prost(int32, tag = "6")]
    pub summary_length: i32,
    #[prost(float, tag = "7")]
    pub compression_ratio: f32,
    #[prost(string, tag = "8")]
    pub language: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub message: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "11")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SummarizeContextRequest {
    #[prost(string, tag = "1")]
    pub context: ::prost::alloc::string::String,
    /// extractive, abstractive, keyword, sentence
    #[prost(string, tag = "2")]
    pub method: ::prost::alloc::string::String,
    #[prost(int32, optional, tag = "3")]
    pub max_length: ::core::option::Option<i32>,
    #[prost(float, optional, tag = "4")]
    pub compression_ratio: ::core::option::Option<f32>,
    #[prost(string, optional, tag = "5")]
    pub language: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(map = "string, string", tag = "6")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SummarizeContextResponse {
    #[prost(string, tag = "1")]
    pub summary_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub original_context: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub summary: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub method: ::prost::alloc::string::String,
    #[prost(int32, tag = "5")]
    pub original_length: i32,
    #[prost(int32, tag = "6")]
    pub summary_length: i32,
    #[prost(float, tag = "7")]
    pub compression_ratio: f32,
    #[prost(string, tag = "8")]
    pub language: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub message: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "11")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSummaryRequest {
    #[prost(string, tag = "1")]
    pub summary_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSummaryResponse {
    #[prost(string, tag = "1")]
    pub summary_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub original_text: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub summary: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub method: ::prost::alloc::string::String,
    #[prost(int32, tag = "5")]
    pub original_length: i32,
    #[prost(int32, tag = "6")]
    pub summary_length: i32,
    #[prost(float, tag = "7")]
    pub compression_ratio: f32,
    #[prost(string, tag = "8")]
    pub language: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub created_at: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "10")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(string, tag = "11")]
    pub status: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListSummariesRequest {
    /// Filter by summarization method
    #[prost(string, optional, tag = "1")]
    pub method: ::core::option::Option<::prost::alloc::string::String>,
    /// Filter by language
    #[prost(string, optional, tag = "2")]
    pub language: ::core::option::Option<::prost::alloc::string::String>,
    /// Maximum number of summaries to return
    #[prost(int32, optional, tag = "3")]
    pub limit: ::core::option::Option<i32>,
    /// Offset for pagination
    #[prost(int32, optional, tag = "4")]
    pub offset: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SummaryInfo {
    #[prost(string, tag = "1")]
    pub summary_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub method: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub language: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub original_length: i32,
    #[prost(int32, tag = "5")]
    pub summary_length: i32,
    #[prost(float, tag = "6")]
    pub compression_ratio: f32,
    #[prost(string, tag = "7")]
    pub created_at: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "8")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListSummariesResponse {
    #[prost(message, repeated, tag = "1")]
    pub summaries: ::prost::alloc::vec::Vec<SummaryInfo>,
    #[prost(int32, tag = "2")]
    pub total_count: i32,
    #[prost(string, tag = "3")]
    pub status: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod vectorizer_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Serviço principal do Vectorizer
    #[derive(Debug, Clone)]
    pub struct VectorizerServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl VectorizerServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> VectorizerServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> VectorizerServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            VectorizerServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Operações de busca
        pub async fn search(
            &mut self,
            request: impl tonic::IntoRequest<super::SearchRequest>,
        ) -> std::result::Result<tonic::Response<super::SearchResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/vectorizer.VectorizerService/Search",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("vectorizer.VectorizerService", "Search"));
            self.inner.unary(req, path, codec).await
        }
        /// Operações de coleções
        pub async fn list_collections(
            &mut self,
            request: impl tonic::IntoRequest<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::ListCollectionsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/vectorizer.VectorizerService/ListCollections",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("vectorizer.VectorizerService", "ListCollections"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_collection_info(
            &mut self,
            request: impl tonic::IntoRequest<super::GetCollectionInfoRequest>,
        ) -> std::result::Result<tonic::Response<super::CollectionInfo>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/vectorizer.VectorizerService/GetCollectionInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("vectorizer.VectorizerService", "GetCollectionInfo"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn create_collection(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateCollectionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateCollectionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/vectorizer.VectorizerService/CreateCollection",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("vectorizer.VectorizerService", "CreateCollection"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_collection(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteCollectionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteCollectionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/vectorizer.VectorizerService/DeleteCollection",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("vectorizer.VectorizerService", "DeleteCollection"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Operações de vetores
        pub async fn insert_texts(
            &mut self,
            request: impl tonic::IntoRequest<super::InsertTextsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::InsertTextsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/vectorizer.VectorizerService/InsertTexts",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("vectorizer.VectorizerService", "InsertTexts"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_vectors(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteVectorsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteVectorsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/vectorizer.VectorizerService/DeleteVectors",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("vectorizer.VectorizerService", "DeleteVectors"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_vector(
            &mut self,
            request: impl tonic::IntoRequest<super::GetVectorRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetVectorResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/vectorizer.VectorizerService/GetVector",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("vectorizer.VectorizerService", "GetVector"));
            self.inner.unary(req, path, codec).await
        }
        /// Operações de embedding
        pub async fn embed_text(
            &mut self,
            request: impl tonic::IntoRequest<super::EmbedRequest>,
        ) -> std::result::Result<tonic::Response<super::EmbedResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/vectorizer.VectorizerService/EmbedText",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("vectorizer.VectorizerService", "EmbedText"));
            self.inner.unary(req, path, codec).await
        }
        /// Operações de indexação
        pub async fn get_indexing_progress(
            &mut self,
            request: impl tonic::IntoRequest<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::IndexingProgressResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/vectorizer.VectorizerService/GetIndexingProgress",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "vectorizer.VectorizerService",
                        "GetIndexingProgress",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_indexing_progress(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateIndexingProgressRequest>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/vectorizer.VectorizerService/UpdateIndexingProgress",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "vectorizer.VectorizerService",
                        "UpdateIndexingProgress",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Health check
        pub async fn health_check(
            &mut self,
            request: impl tonic::IntoRequest<super::Empty>,
        ) -> std::result::Result<tonic::Response<super::HealthResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/vectorizer.VectorizerService/HealthCheck",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("vectorizer.VectorizerService", "HealthCheck"));
            self.inner.unary(req, path, codec).await
        }
        /// Operações de sumarização
        pub async fn summarize_text(
            &mut self,
            request: impl tonic::IntoRequest<super::SummarizeTextRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SummarizeTextResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/vectorizer.VectorizerService/SummarizeText",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("vectorizer.VectorizerService", "SummarizeText"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn summarize_context(
            &mut self,
            request: impl tonic::IntoRequest<super::SummarizeContextRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SummarizeContextResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/vectorizer.VectorizerService/SummarizeContext",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("vectorizer.VectorizerService", "SummarizeContext"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_summary(
            &mut self,
            request: impl tonic::IntoRequest<super::GetSummaryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetSummaryResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/vectorizer.VectorizerService/GetSummary",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("vectorizer.VectorizerService", "GetSummary"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn list_summaries(
            &mut self,
            request: impl tonic::IntoRequest<super::ListSummariesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListSummariesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/vectorizer.VectorizerService/ListSummaries",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("vectorizer.VectorizerService", "ListSummaries"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod vectorizer_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with VectorizerServiceServer.
    #[async_trait]
    pub trait VectorizerService: std::marker::Send + std::marker::Sync + 'static {
        /// Operações de busca
        async fn search(
            &self,
            request: tonic::Request<super::SearchRequest>,
        ) -> std::result::Result<tonic::Response<super::SearchResponse>, tonic::Status>;
        /// Operações de coleções
        async fn list_collections(
            &self,
            request: tonic::Request<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::ListCollectionsResponse>,
            tonic::Status,
        >;
        async fn get_collection_info(
            &self,
            request: tonic::Request<super::GetCollectionInfoRequest>,
        ) -> std::result::Result<tonic::Response<super::CollectionInfo>, tonic::Status>;
        async fn create_collection(
            &self,
            request: tonic::Request<super::CreateCollectionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateCollectionResponse>,
            tonic::Status,
        >;
        async fn delete_collection(
            &self,
            request: tonic::Request<super::DeleteCollectionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteCollectionResponse>,
            tonic::Status,
        >;
        /// Operações de vetores
        async fn insert_texts(
            &self,
            request: tonic::Request<super::InsertTextsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::InsertTextsResponse>,
            tonic::Status,
        >;
        async fn delete_vectors(
            &self,
            request: tonic::Request<super::DeleteVectorsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteVectorsResponse>,
            tonic::Status,
        >;
        async fn get_vector(
            &self,
            request: tonic::Request<super::GetVectorRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetVectorResponse>,
            tonic::Status,
        >;
        /// Operações de embedding
        async fn embed_text(
            &self,
            request: tonic::Request<super::EmbedRequest>,
        ) -> std::result::Result<tonic::Response<super::EmbedResponse>, tonic::Status>;
        /// Operações de indexação
        async fn get_indexing_progress(
            &self,
            request: tonic::Request<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::IndexingProgressResponse>,
            tonic::Status,
        >;
        async fn update_indexing_progress(
            &self,
            request: tonic::Request<super::UpdateIndexingProgressRequest>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status>;
        /// Health check
        async fn health_check(
            &self,
            request: tonic::Request<super::Empty>,
        ) -> std::result::Result<tonic::Response<super::HealthResponse>, tonic::Status>;
        /// Operações de sumarização
        async fn summarize_text(
            &self,
            request: tonic::Request<super::SummarizeTextRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SummarizeTextResponse>,
            tonic::Status,
        >;
        async fn summarize_context(
            &self,
            request: tonic::Request<super::SummarizeContextRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SummarizeContextResponse>,
            tonic::Status,
        >;
        async fn get_summary(
            &self,
            request: tonic::Request<super::GetSummaryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetSummaryResponse>,
            tonic::Status,
        >;
        async fn list_summaries(
            &self,
            request: tonic::Request<super::ListSummariesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListSummariesResponse>,
            tonic::Status,
        >;
    }
    /// Serviço principal do Vectorizer
    #[derive(Debug)]
    pub struct VectorizerServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> VectorizerServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for VectorizerServiceServer<T>
    where
        T: VectorizerService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/vectorizer.VectorizerService/Search" => {
                    #[allow(non_camel_case_types)]
                    struct SearchSvc<T: VectorizerService>(pub Arc<T>);
                    impl<
                        T: VectorizerService,
                    > tonic::server::UnaryService<super::SearchRequest>
                    for SearchSvc<T> {
                        type Response = super::SearchResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as VectorizerService>::search(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SearchSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/vectorizer.VectorizerService/ListCollections" => {
                    #[allow(non_camel_case_types)]
                    struct ListCollectionsSvc<T: VectorizerService>(pub Arc<T>);
                    impl<T: VectorizerService> tonic::server::UnaryService<super::Empty>
                    for ListCollectionsSvc<T> {
                        type Response = super::ListCollectionsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::Empty>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as VectorizerService>::list_collections(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListCollectionsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/vectorizer.VectorizerService/GetCollectionInfo" => {
                    #[allow(non_camel_case_types)]
                    struct GetCollectionInfoSvc<T: VectorizerService>(pub Arc<T>);
                    impl<
                        T: VectorizerService,
                    > tonic::server::UnaryService<super::GetCollectionInfoRequest>
                    for GetCollectionInfoSvc<T> {
                        type Response = super::CollectionInfo;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetCollectionInfoRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as VectorizerService>::get_collection_info(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetCollectionInfoSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/vectorizer.VectorizerService/CreateCollection" => {
                    #[allow(non_camel_case_types)]
                    struct CreateCollectionSvc<T: VectorizerService>(pub Arc<T>);
                    impl<
                        T: VectorizerService,
                    > tonic::server::UnaryService<super::CreateCollectionRequest>
                    for CreateCollectionSvc<T> {
                        type Response = super::CreateCollectionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateCollectionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as VectorizerService>::create_collection(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateCollectionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/vectorizer.VectorizerService/DeleteCollection" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteCollectionSvc<T: VectorizerService>(pub Arc<T>);
                    impl<
                        T: VectorizerService,
                    > tonic::server::UnaryService<super::DeleteCollectionRequest>
                    for DeleteCollectionSvc<T> {
                        type Response = super::DeleteCollectionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteCollectionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as VectorizerService>::delete_collection(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteCollectionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/vectorizer.VectorizerService/InsertTexts" => {
                    #[allow(non_camel_case_types)]
                    struct InsertTextsSvc<T: VectorizerService>(pub Arc<T>);
                    impl<
                        T: VectorizerService,
                    > tonic::server::UnaryService<super::InsertTextsRequest>
                    for InsertTextsSvc<T> {
                        type Response = super::InsertTextsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::InsertTextsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as VectorizerService>::insert_texts(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = InsertTextsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/vectorizer.VectorizerService/DeleteVectors" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteVectorsSvc<T: VectorizerService>(pub Arc<T>);
                    impl<
                        T: VectorizerService,
                    > tonic::server::UnaryService<super::DeleteVectorsRequest>
                    for DeleteVectorsSvc<T> {
                        type Response = super::DeleteVectorsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteVectorsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as VectorizerService>::delete_vectors(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteVectorsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/vectorizer.VectorizerService/GetVector" => {
                    #[allow(non_camel_case_types)]
                    struct GetVectorSvc<T: VectorizerService>(pub Arc<T>);
                    impl<
                        T: VectorizerService,
                    > tonic::server::UnaryService<super::GetVectorRequest>
                    for GetVectorSvc<T> {
                        type Response = super::GetVectorResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetVectorRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as VectorizerService>::get_vector(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetVectorSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/vectorizer.VectorizerService/EmbedText" => {
                    #[allow(non_camel_case_types)]
                    struct EmbedTextSvc<T: VectorizerService>(pub Arc<T>);
                    impl<
                        T: VectorizerService,
                    > tonic::server::UnaryService<super::EmbedRequest>
                    for EmbedTextSvc<T> {
                        type Response = super::EmbedResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::EmbedRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as VectorizerService>::embed_text(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = EmbedTextSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/vectorizer.VectorizerService/GetIndexingProgress" => {
                    #[allow(non_camel_case_types)]
                    struct GetIndexingProgressSvc<T: VectorizerService>(pub Arc<T>);
                    impl<T: VectorizerService> tonic::server::UnaryService<super::Empty>
                    for GetIndexingProgressSvc<T> {
                        type Response = super::IndexingProgressResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::Empty>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as VectorizerService>::get_indexing_progress(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetIndexingProgressSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/vectorizer.VectorizerService/UpdateIndexingProgress" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateIndexingProgressSvc<T: VectorizerService>(pub Arc<T>);
                    impl<
                        T: VectorizerService,
                    > tonic::server::UnaryService<super::UpdateIndexingProgressRequest>
                    for UpdateIndexingProgressSvc<T> {
                        type Response = super::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateIndexingProgressRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as VectorizerService>::update_indexing_progress(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateIndexingProgressSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/vectorizer.VectorizerService/HealthCheck" => {
                    #[allow(non_camel_case_types)]
                    struct HealthCheckSvc<T: VectorizerService>(pub Arc<T>);
                    impl<T: VectorizerService> tonic::server::UnaryService<super::Empty>
                    for HealthCheckSvc<T> {
                        type Response = super::HealthResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::Empty>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as VectorizerService>::health_check(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = HealthCheckSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/vectorizer.VectorizerService/SummarizeText" => {
                    #[allow(non_camel_case_types)]
                    struct SummarizeTextSvc<T: VectorizerService>(pub Arc<T>);
                    impl<
                        T: VectorizerService,
                    > tonic::server::UnaryService<super::SummarizeTextRequest>
                    for SummarizeTextSvc<T> {
                        type Response = super::SummarizeTextResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SummarizeTextRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as VectorizerService>::summarize_text(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SummarizeTextSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/vectorizer.VectorizerService/SummarizeContext" => {
                    #[allow(non_camel_case_types)]
                    struct SummarizeContextSvc<T: VectorizerService>(pub Arc<T>);
                    impl<
                        T: VectorizerService,
                    > tonic::server::UnaryService<super::SummarizeContextRequest>
                    for SummarizeContextSvc<T> {
                        type Response = super::SummarizeContextResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SummarizeContextRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as VectorizerService>::summarize_context(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SummarizeContextSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/vectorizer.VectorizerService/GetSummary" => {
                    #[allow(non_camel_case_types)]
                    struct GetSummarySvc<T: VectorizerService>(pub Arc<T>);
                    impl<
                        T: VectorizerService,
                    > tonic::server::UnaryService<super::GetSummaryRequest>
                    for GetSummarySvc<T> {
                        type Response = super::GetSummaryResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetSummaryRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as VectorizerService>::get_summary(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetSummarySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/vectorizer.VectorizerService/ListSummaries" => {
                    #[allow(non_camel_case_types)]
                    struct ListSummariesSvc<T: VectorizerService>(pub Arc<T>);
                    impl<
                        T: VectorizerService,
                    > tonic::server::UnaryService<super::ListSummariesRequest>
                    for ListSummariesSvc<T> {
                        type Response = super::ListSummariesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListSummariesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as VectorizerService>::list_summaries(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListSummariesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for VectorizerServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "vectorizer.VectorizerService";
    impl<T> tonic::server::NamedService for VectorizerServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
