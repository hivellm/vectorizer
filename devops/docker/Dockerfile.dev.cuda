# Development Dockerfile for Vectorizer v0.20.0 (CUDA)
# Features: Development tools, hot reload, debugging support, CUDA acceleration
# Note: This version includes CUDA support for development and testing

FROM nvidia/cuda:12.6-devel-ubuntu22.04

# Install system dependencies and development tools
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    ca-certificates \
    curl \
    git \
    vim \
    htop \
    build-essential \
    cmake \
    gdb \
    valgrind \
    python3 \
    python3-pip \
    && rm -rf /var/lib/apt/lists/*

# Install Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"

# Install additional Rust tools for development
RUN cargo install cargo-watch cargo-outdated cargo-audit cargo-clippy

# Clone and build CUHNSW dependency
RUN git clone https://github.com/js1010/cuhnsw.git /tmp/cuhnsw && \
    cd /tmp/cuhnsw && \
    git submodule update --init && \
    pip3 install -r requirements.txt && \
    python3 -m grpc_tools.protoc --python_out cuhnsw/ --proto_path cuhnsw/proto/ config.proto && \
    python3 setup.py install && \
    cd / && rm -rf /tmp/cuhnsw

# Set working directory
WORKDIR /app

# Copy manifest files
COPY Cargo.toml Cargo.lock ./
COPY build.rs ./

# Copy source code
COPY src/ src/
COPY proto/ proto/
COPY examples/ examples/
COPY docs/ docs/
COPY benches/ benches/
COPY tests/ tests/
COPY scripts/ scripts/
COPY config/ ./config/
COPY audit.toml ./

# Make scripts executable
RUN chmod +x scripts/*.sh

# Create data directory
RUN mkdir -p /app/data /app/cache /app/logs

# Expose ports for GRPC architecture
EXPOSE 15001 15002 15003

# Development command - use development scripts with hot reload
CMD ["./scripts/start-dev.sh"]
