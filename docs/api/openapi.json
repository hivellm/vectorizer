{
  "openapi": "3.0.3",
  "info": {
    "title": "Vectorizer API",
    "description": "High-performance vector database engine with semantic search capabilities.\nSupports multiple embedding providers (TF-IDF, BM25, BERT, MiniLM) and\nprovides real-time indexing with HNSW optimization.\n",
    "version": "0.3.1",
    "contact": {
      "name": "Vectorizer Team",
      "url": "https://github.com/hivellm/vectorizer"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:15001/api/v1",
      "description": "Local development server"
    },
    {
      "url": "http://127.0.0.1:15001/api/v1",
      "description": "Local server alternative"
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "summary": "Health Check",
        "description": "Check if the Vectorizer service is running",
        "operationId": "healthCheck",
        "tags": [
          "System"
        ],
        "responses": {
          "200": {
            "description": "Service is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/stats": {
      "get": {
        "summary": "Get System Statistics",
        "description": "Retrieve system-wide statistics and metrics",
        "operationId": "getStats",
        "tags": [
          "System"
        ],
        "responses": {
          "200": {
            "description": "System statistics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/collections": {
      "get": {
        "summary": "List Collections",
        "description": "Get all available collections",
        "operationId": "listCollections",
        "tags": [
          "Collections"
        ],
        "responses": {
          "200": {
            "description": "List of collections",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCollectionsResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Collection",
        "description": "Create a new vector collection",
        "operationId": "createCollection",
        "tags": [
          "Collections"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCollectionRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Collection created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/collections/{collection_name}": {
      "get": {
        "summary": "Get Collection Info",
        "description": "Get detailed information about a specific collection",
        "operationId": "getCollection",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "collection_name",
            "in": "path",
            "required": true,
            "description": "Name of the collection",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Collection information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionInfo"
                }
              }
            }
          },
          "404": {
            "description": "Collection not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Collection",
        "description": "Delete a collection and all its vectors",
        "operationId": "deleteCollection",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "collection_name",
            "in": "path",
            "required": true,
            "description": "Name of the collection to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Collection deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteCollectionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Collection not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/collections/{collection_name}/vectors": {
      "get": {
        "summary": "List Vectors",
        "description": "List vectors in a collection",
        "operationId": "listVectors",
        "tags": [
          "Vectors"
        ],
        "parameters": [
          {
            "name": "collection_name",
            "in": "path",
            "required": true,
            "description": "Name of the collection",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of vectors to return",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of vectors to skip",
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of vectors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListVectorsResponse"
                }
              }
            }
          },
          "404": {
            "description": "Collection not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Insert Texts",
        "description": "Insert text content with automatic embedding generation",
        "operationId": "insertTexts",
        "tags": [
          "Vectors"
        ],
        "parameters": [
          {
            "name": "collection_name",
            "in": "path",
            "required": true,
            "description": "Name of the collection",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InsertTextsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Texts inserted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsertTextsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Collection not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/collections/{collection_name}/vectors/{vector_id}": {
      "get": {
        "summary": "Get Vector",
        "description": "Get a specific vector by ID",
        "operationId": "getVector",
        "tags": [
          "Vectors"
        ],
        "parameters": [
          {
            "name": "collection_name",
            "in": "path",
            "required": true,
            "description": "Name of the collection",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vector_id",
            "in": "path",
            "required": true,
            "description": "ID of the vector",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vector information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VectorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Vector not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Vector",
        "description": "Delete a specific vector",
        "operationId": "deleteVector",
        "tags": [
          "Vectors"
        ],
        "parameters": [
          {
            "name": "collection_name",
            "in": "path",
            "required": true,
            "description": "Name of the collection",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vector_id",
            "in": "path",
            "required": true,
            "description": "ID of the vector to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vector deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteVectorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Vector not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/collections/{collection_name}/search": {
      "post": {
        "summary": "Search Vectors",
        "description": "Search for similar vectors using vector or text query",
        "operationId": "searchVectors",
        "tags": [
          "Search"
        ],
        "parameters": [
          {
            "name": "collection_name",
            "in": "path",
            "required": true,
            "description": "Name of the collection to search",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchUnifiedRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Collection not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/collections/{collection_name}/search/text": {
      "post": {
        "summary": "Search by Text",
        "description": "Search using text query (automatically embedded)",
        "operationId": "searchVectorsByText",
        "tags": [
          "Search"
        ],
        "parameters": [
          {
            "name": "collection_name",
            "in": "path",
            "required": true,
            "description": "Name of the collection to search",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchTextRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/collections/{collection_name}/batch/insert": {
      "post": {
        "summary": "Batch Insert Texts",
        "description": "Insert multiple texts efficiently in batch",
        "operationId": "batchInsertTexts",
        "tags": [
          "Batch Operations"
        ],
        "parameters": [
          {
            "name": "collection_name",
            "in": "path",
            "required": true,
            "description": "Name of the collection",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInsertRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Batch operation completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/embedding/providers": {
      "get": {
        "summary": "List Embedding Providers",
        "description": "Get available embedding providers",
        "operationId": "listEmbeddingProviders",
        "tags": [
          "Embedding"
        ],
        "responses": {
          "200": {
            "description": "List of embedding providers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingProvidersResponse"
                }
              }
            }
          }
        }
      }
    },
    "/embedding/providers/set": {
      "post": {
        "summary": "Set Embedding Provider",
        "description": "Set the default embedding provider",
        "operationId": "setEmbeddingProvider",
        "tags": [
          "Embedding"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetEmbeddingProviderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Embedding provider set successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetEmbeddingProviderResponse"
                }
              }
            }
          }
        }
      }
    },
    "/indexing/progress": {
      "get": {
        "summary": "Get Indexing Progress",
        "description": "Get current indexing progress for all collections",
        "operationId": "getIndexingProgress",
        "tags": [
          "Indexing"
        ],
        "responses": {
          "200": {
            "description": "Indexing progress information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexingProgressResponse"
                }
              }
            }
          }
        }
      }
    },
    "/summarize/text": {
      "post": {
        "summary": "Summarize Text",
        "description": "Generate intelligent summaries of text content",
        "operationId": "summarizeText",
        "tags": [
          "Summarization"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SummarizeTextRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Text summarized successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SummarizeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/summaries": {
      "get": {
        "summary": "List Summaries",
        "description": "List all available summaries with filtering options",
        "operationId": "listSummaries",
        "tags": [
          "Summarization"
        ],
        "parameters": [
          {
            "name": "method",
            "in": "query",
            "description": "Filter by summarization method",
            "schema": {
              "type": "string",
              "enum": [
                "extractive",
                "keyword",
                "sentence",
                "abstractive"
              ]
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "Filter by language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of summaries to return",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of summaries to skip",
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of summaries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListSummariesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/summaries/{summary_id}": {
      "get": {
        "summary": "Get Summary",
        "description": "Retrieve a specific summary by ID",
        "operationId": "getSummary",
        "tags": [
          "Summarization"
        ],
        "parameters": [
          {
            "name": "summary_id",
            "in": "path",
            "required": true,
            "description": "ID of the summary to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Summary information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SummaryInfo"
                }
              }
            }
          },
          "404": {
            "description": "Summary not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/intelligent_search": {
      "post": {
        "summary": "Intelligent Search",
        "description": "Advanced semantic search with AI-powered query expansion, intelligent deduplication, \nand Maximal Marginal Relevance (MMR) diversification. Automatically generates multiple \nquery variations, applies domain-specific knowledge, and ensures diverse, high-quality results.\nIdeal for complex research queries and comprehensive information retrieval.\n",
        "operationId": "intelligentSearch",
        "tags": [
          "Intelligent Search"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntelligentSearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Intelligent search results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntelligentSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/multi_collection_search": {
      "post": {
        "summary": "Multi-Collection Search",
        "description": "Search across multiple vector collections simultaneously with intelligent cross-collection \nranking and result aggregation. Automatically balances results from different collections, \napplies collection-specific scoring bonuses, and provides unified ranking across all sources.\nPerfect for comprehensive research across multiple data sources.\n",
        "operationId": "multiCollectionSearch",
        "tags": [
          "Intelligent Search"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiCollectionSearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Multi-collection search results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultiCollectionSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/semantic_search": {
      "post": {
        "summary": "Semantic Search",
        "description": "Advanced semantic search with sophisticated reranking algorithms including semantic \nsimilarity scoring, cross-encoder reranking, and similarity threshold filtering. \nProvides highly accurate results by understanding context and meaning beyond simple \nkeyword matching. Ideal for precise information retrieval with quality control.\n",
        "operationId": "semanticSearch",
        "tags": [
          "Intelligent Search"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SemanticSearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Semantic search results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SemanticSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contextual_search": {
      "post": {
        "summary": "Contextual Search",
        "description": "Context-aware semantic search with intelligent metadata filtering and contextual reranking. \nCombines semantic similarity with metadata-based filtering to provide highly relevant \nresults based on specific context requirements. Supports complex filtering criteria and \ncontext-weighted scoring for precise information retrieval.\n",
        "operationId": "contextualSearch",
        "tags": [
          "Intelligent Search"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContextualSearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contextual search results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContextualSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/discover": {
      "post": {
        "summary": "Discovery Pipeline",
        "description": "Complete discovery pipeline that chains filtering, scoring, expansion, search, ranking, compression, and prompt generation",
        "operationId": "discover",
        "tags": [
          "Discovery"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscoverRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Discovery results with LLM-ready prompt",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscoverResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/discovery/filter_collections": {
      "post": {
        "summary": "Filter Collections",
        "description": "Pre-filter collections by name patterns with stopword removal from query",
        "operationId": "filterCollections",
        "tags": [
          "Discovery"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "Search query for filtering"
                  },
                  "include": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Include patterns (e.g., ['vectorizer*', '*-docs'])"
                  },
                  "exclude": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Exclude patterns (e.g., ['*-test'])"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Filtered collections",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/discovery/score_collections": {
      "post": {
        "summary": "Score Collections",
        "description": "Rank collections by relevance using name match, term boost, and signal boost",
        "operationId": "scoreCollections",
        "tags": [
          "Discovery"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string"
                  },
                  "name_match_weight": {
                    "type": "number",
                    "default": 0.4
                  },
                  "term_boost_weight": {
                    "type": "number",
                    "default": 0.3
                  },
                  "signal_boost_weight": {
                    "type": "number",
                    "default": 0.3
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Scored collections",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/discovery/expand_queries": {
      "post": {
        "summary": "Expand Queries",
        "description": "Generate query variations (definition, features, architecture, API, performance, use cases)",
        "operationId": "expandQueries",
        "tags": [
          "Discovery"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string"
                  },
                  "max_expansions": {
                    "type": "integer",
                    "default": 8
                  },
                  "include_definition": {
                    "type": "boolean",
                    "default": true
                  },
                  "include_features": {
                    "type": "boolean",
                    "default": true
                  },
                  "include_architecture": {
                    "type": "boolean",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expanded queries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/discovery/broad_discovery": {
      "post": {
        "summary": "Broad Discovery",
        "description": "Multi-query broad search with MMR diversification and deduplication",
        "operationId": "broadDiscovery",
        "tags": [
          "Discovery"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "queries"
                ],
                "properties": {
                  "queries": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "k": {
                    "type": "integer",
                    "default": 50
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Broad discovery results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/discovery/semantic_focus": {
      "post": {
        "summary": "Semantic Focus",
        "description": "Deep semantic search in specific collection with reranking and context window",
        "operationId": "semanticFocus",
        "tags": [
          "Discovery"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "collection",
                  "queries"
                ],
                "properties": {
                  "collection": {
                    "type": "string"
                  },
                  "queries": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "k": {
                    "type": "integer",
                    "default": 15
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Semantic focus results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/discovery/promote_readme": {
      "post": {
        "summary": "Promote README",
        "description": "Boost README files to the top of search results",
        "operationId": "promoteReadme",
        "tags": [
          "Discovery"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "chunks"
                ],
                "properties": {
                  "chunks": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Promoted chunks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/discovery/compress_evidence": {
      "post": {
        "summary": "Compress Evidence",
        "description": "Extract key sentences (8-30 words) with citations from chunks",
        "operationId": "compressEvidence",
        "tags": [
          "Discovery"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "chunks"
                ],
                "properties": {
                  "chunks": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  },
                  "max_bullets": {
                    "type": "integer",
                    "default": 20
                  },
                  "max_per_doc": {
                    "type": "integer",
                    "default": 3
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Compressed evidence bullets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/discovery/build_answer_plan": {
      "post": {
        "summary": "Build Answer Plan",
        "description": "Organize bullets into structured sections",
        "operationId": "buildAnswerPlan",
        "tags": [
          "Discovery"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "bullets"
                ],
                "properties": {
                  "bullets": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Structured answer plan",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/discovery/render_llm_prompt": {
      "post": {
        "summary": "Render LLM Prompt",
        "description": "Generate compact, structured prompt for LLM with instructions, evidence, and citations",
        "operationId": "renderLlmPrompt",
        "tags": [
          "Discovery"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "plan"
                ],
                "properties": {
                  "plan": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "LLM-ready prompt",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/file/content": {
      "post": {
        "summary": "Get File Content",
        "description": "Retrieve complete file content from a collection",
        "operationId": "getFileContent",
        "tags": [
          "File Operations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetFileContentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileContentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/file/list": {
      "post": {
        "summary": "List Files in Collection",
        "description": "List all indexed files in a collection with metadata",
        "operationId": "listFilesInCollection",
        "tags": [
          "File Operations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListFilesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of files",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFilesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/file/summary": {
      "post": {
        "summary": "Get File Summary",
        "description": "Get extractive or structural summary of an indexed file",
        "operationId": "getFileSummary",
        "tags": [
          "File Operations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetFileSummaryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File summary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileSummaryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/file/chunks": {
      "post": {
        "summary": "Get File Chunks Ordered",
        "description": "Retrieve chunks in original file order for progressive reading",
        "operationId": "getFileChunksOrdered",
        "tags": [
          "File Operations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetFileChunksRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File chunks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileChunksResponse"
                }
              }
            }
          }
        }
      }
    },
    "/file/outline": {
      "post": {
        "summary": "Get Project Outline",
        "description": "Generate hierarchical project structure overview",
        "operationId": "getProjectOutline",
        "tags": [
          "File Operations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetProjectOutlineRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project outline",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectOutlineResponse"
                }
              }
            }
          }
        }
      }
    },
    "/file/related": {
      "post": {
        "summary": "Get Related Files",
        "description": "Find semantically related files using vector similarity",
        "operationId": "getRelatedFiles",
        "tags": [
          "File Operations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetRelatedFilesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Related files",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelatedFilesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/file/search_by_type": {
      "post": {
        "summary": "Search by File Type",
        "description": "Semantic search filtered by file type",
        "operationId": "searchByFileType",
        "tags": [
          "File Operations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchByFileTypeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchByFileTypeResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "HealthResponse": {
        "type": "object",
        "required": [
          "status",
          "version",
          "timestamp",
          "uptime",
          "collections",
          "total_vectors"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "healthy",
              "unhealthy"
            ],
            "description": "Service health status"
          },
          "version": {
            "type": "string",
            "description": "API version"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Current server timestamp"
          },
          "uptime": {
            "type": "integer",
            "description": "Server uptime in seconds"
          },
          "collections": {
            "type": "integer",
            "description": "Number of collections"
          },
          "total_vectors": {
            "type": "integer",
            "description": "Total number of vectors across all collections"
          }
        }
      },
      "StatsResponse": {
        "type": "object",
        "required": [
          "collections",
          "total_vectors",
          "total_documents",
          "uptime"
        ],
        "properties": {
          "collections": {
            "type": "integer",
            "description": "Number of collections"
          },
          "total_vectors": {
            "type": "integer",
            "description": "Total vectors across all collections"
          },
          "total_documents": {
            "type": "integer",
            "description": "Total documents indexed"
          },
          "uptime": {
            "type": "integer",
            "description": "Server uptime in seconds"
          },
          "memory_usage_mb": {
            "type": "number",
            "description": "Memory usage in MB"
          },
          "cpu_usage_percent": {
            "type": "number",
            "description": "CPU usage percentage"
          }
        }
      },
      "CreateCollectionRequest": {
        "type": "object",
        "required": [
          "name",
          "dimension",
          "metric"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Collection name",
            "pattern": "^[a-zA-Z0-9_-]+$"
          },
          "dimension": {
            "type": "integer",
            "minimum": 1,
            "maximum": 4096,
            "description": "Vector dimension"
          },
          "metric": {
            "$ref": "#/components/schemas/DistanceMetric"
          },
          "hnsw_config": {
            "$ref": "#/components/schemas/HnswConfig"
          }
        }
      },
      "CreateCollectionResponse": {
        "type": "object",
        "required": [
          "message",
          "collection"
        ],
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message"
          },
          "collection": {
            "type": "string",
            "description": "Created collection name"
          }
        }
      },
      "CollectionInfo": {
        "type": "object",
        "required": [
          "name",
          "dimension",
          "metric",
          "embedding_provider",
          "vector_count",
          "document_count",
          "created_at",
          "updated_at",
          "indexing_status"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Collection name"
          },
          "dimension": {
            "type": "integer",
            "description": "Vector dimension"
          },
          "metric": {
            "$ref": "#/components/schemas/DistanceMetric"
          },
          "embedding_provider": {
            "type": "string",
            "description": "Embedding provider used"
          },
          "vector_count": {
            "type": "integer",
            "description": "Number of vectors"
          },
          "document_count": {
            "type": "integer",
            "description": "Number of documents"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "indexing_status": {
            "$ref": "#/components/schemas/IndexingStatus"
          }
        }
      },
      "ListCollectionsResponse": {
        "type": "object",
        "required": [
          "collections"
        ],
        "properties": {
          "collections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CollectionInfo"
            }
          }
        }
      },
      "DistanceMetric": {
        "type": "string",
        "enum": [
          "cosine",
          "euclidean",
          "dot_product"
        ],
        "description": "Distance metric for similarity calculations"
      },
      "HnswConfig": {
        "type": "object",
        "properties": {
          "m": {
            "type": "integer",
            "minimum": 2,
            "maximum": 64,
            "default": 16,
            "description": "Number of bi-directional links for each node"
          },
          "ef_construction": {
            "type": "integer",
            "minimum": 4,
            "maximum": 1000,
            "default": 200,
            "description": "Size of dynamic candidate list for construction"
          },
          "ef_search": {
            "type": "integer",
            "minimum": 4,
            "maximum": 1000,
            "default": 64,
            "description": "Size of dynamic candidate list for search"
          }
        }
      },
      "IndexingStatus": {
        "type": "object",
        "required": [
          "status",
          "progress",
          "total_documents",
          "processed_documents",
          "vector_count",
          "last_updated"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Current indexing status"
          },
          "progress": {
            "type": "number",
            "minimum": 0,
            "maximum": 100,
            "description": "Progress percentage"
          },
          "total_documents": {
            "type": "integer",
            "description": "Total documents to process"
          },
          "processed_documents": {
            "type": "integer",
            "description": "Documents processed so far"
          },
          "vector_count": {
            "type": "integer",
            "description": "Number of vectors in collection"
          },
          "estimated_time_remaining": {
            "type": "integer",
            "description": "Estimated time remaining in seconds"
          },
          "last_updated": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "InsertTextsRequest": {
        "type": "object",
        "required": [
          "texts"
        ],
        "properties": {
          "texts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextData"
            },
            "description": "Array of texts to insert"
          }
        }
      },
      "TextData": {
        "type": "object",
        "required": [
          "id",
          "text"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the text"
          },
          "text": {
            "type": "string",
            "description": "Text content to be embedded"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata"
          }
        }
      },
      "InsertTextsResponse": {
        "type": "object",
        "required": [
          "message",
          "inserted",
          "inserted_count"
        ],
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message"
          },
          "inserted": {
            "type": "integer",
            "description": "Number of texts inserted"
          },
          "inserted_count": {
            "type": "integer",
            "description": "Number of vectors inserted (alias)"
          }
        }
      },
      "SearchTextRequest": {
        "type": "object",
        "required": [
          "query"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "Text query to search for"
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 1000,
            "default": 10,
            "description": "Maximum number of results"
          },
          "score_threshold": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "description": "Minimum similarity score"
          },
          "file_filter": {
            "type": "string",
            "description": "Filter by file path"
          }
        }
      },
      "SearchRequest": {
        "type": "object",
        "required": [
          "vector"
        ],
        "properties": {
          "vector": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "Query vector"
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 1000,
            "default": 10,
            "description": "Maximum number of results"
          },
          "score_threshold": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "description": "Minimum similarity score"
          },
          "file_filter": {
            "type": "string",
            "description": "Filter by file path"
          }
        }
      },
      "SearchUnifiedRequest": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SearchRequest"
          },
          {
            "$ref": "#/components/schemas/SearchTextRequest"
          }
        ]
      },
      "SearchResult": {
        "type": "object",
        "required": [
          "id",
          "score",
          "vector"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Vector ID"
          },
          "score": {
            "type": "number",
            "description": "Similarity score"
          },
          "vector": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "Vector values"
          },
          "payload": {
            "type": "object",
            "description": "Vector metadata"
          }
        }
      },
      "SearchResponse": {
        "type": "object",
        "required": [
          "results",
          "query_time_ms",
          "total_results"
        ],
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchResult"
            }
          },
          "query_time_ms": {
            "type": "number",
            "description": "Query execution time in milliseconds"
          },
          "total_results": {
            "type": "integer",
            "description": "Total number of results found"
          }
        }
      },
      "ListVectorsResponse": {
        "type": "object",
        "required": [
          "vectors",
          "total",
          "limit",
          "offset"
        ],
        "properties": {
          "vectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VectorResponse"
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of vectors"
          },
          "limit": {
            "type": "integer",
            "description": "Limit used"
          },
          "offset": {
            "type": "integer",
            "description": "Offset used"
          },
          "message": {
            "type": "string",
            "description": "Optional message"
          }
        }
      },
      "VectorResponse": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Vector ID"
          },
          "payload": {
            "type": "object",
            "description": "Vector metadata"
          }
        }
      },
      "VectorInfo": {
        "type": "object",
        "required": [
          "id",
          "vector",
          "metadata"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Vector ID"
          },
          "vector": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "Vector values"
          },
          "metadata": {
            "type": "object",
            "description": "Vector metadata"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "BatchInsertRequest": {
        "type": "object",
        "required": [
          "texts"
        ],
        "properties": {
          "texts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextData"
            },
            "description": "Array of texts to insert"
          },
          "provider": {
            "type": "string",
            "enum": [
              "bm25",
              "native_bow",
              "native_hash",
              "native_ngram"
            ],
            "default": "bm25",
            "description": "Embedding provider to use"
          }
        }
      },
      "BatchResponse": {
        "type": "object",
        "required": [
          "success",
          "collection",
          "operation",
          "total_operations",
          "successful_operations",
          "failed_operations",
          "duration_ms",
          "errors"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the batch operation succeeded"
          },
          "collection": {
            "type": "string",
            "description": "Collection name"
          },
          "operation": {
            "type": "string",
            "description": "Operation type"
          },
          "total_operations": {
            "type": "integer",
            "description": "Total number of operations"
          },
          "successful_operations": {
            "type": "integer",
            "description": "Number of successful operations"
          },
          "failed_operations": {
            "type": "integer",
            "description": "Number of failed operations"
          },
          "duration_ms": {
            "type": "integer",
            "description": "Operation duration in milliseconds"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of error messages"
          }
        }
      },
      "EmbeddingProvidersResponse": {
        "type": "object",
        "required": [
          "providers"
        ],
        "properties": {
          "providers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmbeddingProvider"
            }
          }
        }
      },
      "EmbeddingProvider": {
        "type": "object",
        "required": [
          "name",
          "description",
          "supported_dimensions"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Provider name"
          },
          "description": {
            "type": "string",
            "description": "Provider description"
          },
          "supported_dimensions": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Supported vector dimensions"
          }
        }
      },
      "SetEmbeddingProviderRequest": {
        "type": "object",
        "required": [
          "provider"
        ],
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "tfidf",
              "bm25",
              "svd",
              "bert",
              "minilm",
              "bagofwords",
              "charngram"
            ],
            "description": "Embedding provider name"
          }
        }
      },
      "SetEmbeddingProviderResponse": {
        "type": "object",
        "required": [
          "message",
          "provider"
        ],
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message"
          },
          "provider": {
            "type": "string",
            "description": "Set provider name"
          }
        }
      },
      "IndexingProgressResponse": {
        "type": "object",
        "required": [
          "overall_status",
          "collections",
          "started_at"
        ],
        "properties": {
          "overall_status": {
            "type": "string",
            "description": "Overall indexing status"
          },
          "collections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IndexingStatus"
            }
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "estimated_completion": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SummarizeTextRequest": {
        "type": "object",
        "required": [
          "text"
        ],
        "properties": {
          "text": {
            "type": "string",
            "description": "Text to summarize"
          },
          "method": {
            "type": "string",
            "enum": [
              "extractive",
              "keyword",
              "sentence",
              "abstractive"
            ],
            "default": "extractive",
            "description": "Summarization method"
          },
          "max_length": {
            "type": "integer",
            "minimum": 10,
            "description": "Maximum summary length"
          },
          "compression_ratio": {
            "type": "number",
            "minimum": 0.1,
            "maximum": 0.9,
            "description": "Compression ratio"
          },
          "language": {
            "type": "string",
            "description": "Language code"
          }
        }
      },
      "SummarizeResponse": {
        "type": "object",
        "required": [
          "summary",
          "original_text",
          "summary_id",
          "method",
          "compression_ratio"
        ],
        "properties": {
          "summary": {
            "type": "string",
            "description": "Generated summary"
          },
          "original_text": {
            "type": "string",
            "description": "Original text"
          },
          "summary_id": {
            "type": "string",
            "description": "Unique summary ID"
          },
          "method": {
            "type": "string",
            "description": "Summarization method used"
          },
          "compression_ratio": {
            "type": "number",
            "description": "Achieved compression ratio"
          },
          "original_length": {
            "type": "integer",
            "description": "Original text length"
          },
          "summary_length": {
            "type": "integer",
            "description": "Summary length"
          }
        }
      },
      "ListSummariesResponse": {
        "type": "object",
        "required": [
          "summaries",
          "total_count"
        ],
        "properties": {
          "summaries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummaryInfo"
            }
          },
          "total_count": {
            "type": "integer",
            "description": "Total number of summaries"
          }
        }
      },
      "SummaryInfo": {
        "type": "object",
        "required": [
          "summary_id",
          "method",
          "compression_ratio",
          "created_at"
        ],
        "properties": {
          "summary_id": {
            "type": "string",
            "description": "Summary ID"
          },
          "method": {
            "type": "string",
            "description": "Summarization method"
          },
          "language": {
            "type": "string",
            "description": "Language code"
          },
          "compression_ratio": {
            "type": "number",
            "description": "Compression ratio achieved"
          },
          "original_length": {
            "type": "integer",
            "description": "Original text length"
          },
          "summary_length": {
            "type": "integer",
            "description": "Summary length"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DeleteCollectionResponse": {
        "type": "object",
        "required": [
          "message",
          "collection"
        ],
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message"
          },
          "collection": {
            "type": "string",
            "description": "Deleted collection name"
          }
        }
      },
      "DeleteVectorResponse": {
        "type": "object",
        "required": [
          "message",
          "vector_id"
        ],
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message"
          },
          "vector_id": {
            "type": "string",
            "description": "Deleted vector ID"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "required": [
          "error",
          "message"
        ],
        "properties": {
          "error": {
            "type": "string",
            "description": "Error type"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "details": {
            "type": "object",
            "description": "Additional error details"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Error timestamp"
          }
        }
      },
      "IntelligentSearchRequest": {
        "type": "object",
        "required": [
          "query"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "Primary search query in natural language",
            "example": "CMMV framework architecture"
          },
          "collections": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specific collections to search in. If not provided, searches all available collections",
            "example": [
              "cmmv-core-docs",
              "cmmv-admin-docs"
            ]
          },
          "max_results": {
            "type": "integer",
            "minimum": 1,
            "maximum": 50,
            "default": 10,
            "description": "Maximum number of results to return after deduplication and MMR diversification"
          },
          "domain_expansion": {
            "type": "boolean",
            "default": true,
            "description": "Enable automatic domain-specific query expansion. Generates related technical terms and synonyms"
          },
          "technical_focus": {
            "type": "boolean",
            "default": true,
            "description": "Prioritize technical content and boost scores for API documentation, code examples, and implementation details"
          },
          "mmr_enabled": {
            "type": "boolean",
            "default": true,
            "description": "Enable Maximal Marginal Relevance diversification to ensure result diversity and avoid redundant information"
          },
          "mmr_lambda": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "default": 0.7,
            "description": "MMR balance parameter 0.0 = maximum diversity, 1.0 = maximum relevance. Controls the trade-off between relevance and diversity"
          }
        }
      },
      "IntelligentSearchResponse": {
        "type": "object",
        "required": [
          "api_version",
          "results",
          "metadata",
          "timestamp",
          "tool_metadata"
        ],
        "properties": {
          "api_version": {
            "type": "string",
            "description": "API version",
            "example": "1.0.0"
          },
          "results": {
            "type": "object",
            "description": "Search results organized by collection",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IntelligentSearchResult"
              }
            }
          },
          "metadata": {
            "type": "object",
            "required": [
              "total_queries",
              "total_results_found",
              "results_after_dedup",
              "collections_searched",
              "processing_time_ms"
            ],
            "properties": {
              "total_queries": {
                "type": "integer",
                "description": "Total number of queries generated and executed"
              },
              "total_results_found": {
                "type": "integer",
                "description": "Total results found before deduplication"
              },
              "results_after_dedup": {
                "type": "integer",
                "description": "Results after deduplication"
              },
              "collections_searched": {
                "type": "integer",
                "description": "Number of collections searched"
              },
              "processing_time_ms": {
                "type": "number",
                "description": "Total processing time in milliseconds"
              }
            }
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Response timestamp"
          },
          "tool_metadata": {
            "type": "object",
            "required": [
              "tool_name"
            ],
            "properties": {
              "tool_name": {
                "type": "string",
                "description": "Name of the tool used",
                "example": "intelligent_search"
              },
              "additional_info": {
                "type": "string",
                "description": "Additional tool-specific information"
              }
            }
          }
        }
      },
      "MultiCollectionSearchRequest": {
        "type": "object",
        "required": [
          "query",
          "collections"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "Search query in natural language",
            "example": "authentication patterns"
          },
          "collections": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of collection names to search across",
            "example": [
              "cmmv-core-docs",
              "cmmv-admin-docs",
              "cmmv-formbuilder-docs"
            ]
          },
          "max_per_collection": {
            "type": "integer",
            "minimum": 1,
            "maximum": 20,
            "default": 5,
            "description": "Maximum number of results to retrieve from each individual collection before cross-collection ranking"
          },
          "max_total_results": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 20,
            "description": "Maximum total number of results to return after cross-collection reranking and aggregation"
          },
          "cross_collection_reranking": {
            "type": "boolean",
            "default": true,
            "description": "Enable intelligent cross-collection reranking to ensure optimal result distribution and relevance across collections"
          }
        }
      },
      "MultiCollectionSearchResponse": {
        "type": "object",
        "required": [
          "api_version",
          "results",
          "metadata",
          "timestamp",
          "tool_metadata"
        ],
        "properties": {
          "api_version": {
            "type": "string",
            "description": "API version",
            "example": "1.0.0"
          },
          "results": {
            "type": "object",
            "description": "Search results organized by collection",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IntelligentSearchResult"
              }
            }
          },
          "metadata": {
            "type": "object",
            "required": [
              "collections_searched",
              "total_queries",
              "total_results_found",
              "results_after_dedup",
              "processing_time_ms"
            ],
            "properties": {
              "collections_searched": {
                "type": "integer",
                "description": "Number of collections searched"
              },
              "total_queries": {
                "type": "integer",
                "description": "Total number of queries executed"
              },
              "total_results_found": {
                "type": "integer",
                "description": "Total results found before cross-collection ranking"
              },
              "results_after_dedup": {
                "type": "integer",
                "description": "Results after deduplication and cross-collection ranking"
              },
              "processing_time_ms": {
                "type": "number",
                "description": "Total processing time in milliseconds"
              }
            }
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Response timestamp"
          },
          "tool_metadata": {
            "type": "object",
            "required": [
              "tool_name"
            ],
            "properties": {
              "tool_name": {
                "type": "string",
                "description": "Name of the tool used",
                "example": "multi_collection_search"
              },
              "additional_info": {
                "type": "string",
                "description": "Additional tool-specific information"
              }
            }
          }
        }
      },
      "SemanticSearchRequest": {
        "type": "object",
        "required": [
          "query",
          "collection"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "Search query in natural language",
            "example": "API documentation"
          },
          "collection": {
            "type": "string",
            "description": "Name of the vector collection to search in",
            "example": "cmmv-core-docs"
          },
          "max_results": {
            "type": "integer",
            "minimum": 1,
            "maximum": 50,
            "default": 10,
            "description": "Maximum number of results to return after semantic reranking and filtering"
          },
          "semantic_reranking": {
            "type": "boolean",
            "default": true,
            "description": "Enable advanced semantic reranking using multiple similarity algorithms and context analysis"
          },
          "cross_encoder_reranking": {
            "type": "boolean",
            "default": false,
            "description": "Enable cross-encoder reranking for maximum precision. Uses advanced neural models for query-document matching"
          },
          "similarity_threshold": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "default": 0.5,
            "description": "Minimum similarity score threshold. Results below this threshold will be filtered out"
          }
        }
      },
      "SemanticSearchResponse": {
        "type": "object",
        "required": [
          "api_version",
          "results",
          "metadata",
          "timestamp",
          "tool_metadata"
        ],
        "properties": {
          "api_version": {
            "type": "string",
            "description": "API version",
            "example": "1.0.0"
          },
          "results": {
            "type": "object",
            "description": "Search results organized by collection",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IntelligentSearchResult"
              }
            }
          },
          "metadata": {
            "type": "object",
            "required": [
              "collections_searched",
              "total_queries",
              "total_results_found",
              "results_after_dedup",
              "processing_time_ms"
            ],
            "properties": {
              "collections_searched": {
                "type": "integer",
                "description": "Number of collections searched"
              },
              "total_queries": {
                "type": "integer",
                "description": "Total number of queries executed"
              },
              "total_results_found": {
                "type": "integer",
                "description": "Total results found before semantic reranking"
              },
              "results_after_dedup": {
                "type": "integer",
                "description": "Results after semantic reranking and filtering"
              },
              "processing_time_ms": {
                "type": "number",
                "description": "Total processing time in milliseconds"
              }
            }
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Response timestamp"
          },
          "tool_metadata": {
            "type": "object",
            "required": [
              "tool_name"
            ],
            "properties": {
              "tool_name": {
                "type": "string",
                "description": "Name of the tool used",
                "example": "semantic_search"
              },
              "additional_info": {
                "type": "string",
                "description": "Additional tool-specific information"
              }
            }
          }
        }
      },
      "ContextualSearchRequest": {
        "type": "object",
        "required": [
          "query",
          "collection"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "Search query in natural language",
            "example": "TypeScript framework"
          },
          "collection": {
            "type": "string",
            "description": "Name of the vector collection to search in",
            "example": "cmmv-core-docs"
          },
          "context_filters": {
            "type": "object",
            "description": "Metadata-based context filters to narrow down results. Supports nested filtering and multiple criteria",
            "example": {
              "file_extension": "md",
              "author": "John Doe",
              "version": "1.0"
            }
          },
          "context_weight": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "default": 0.3,
            "description": "Weight of context factors in final scoring. Higher values prioritize metadata matches over semantic similarity"
          },
          "context_reranking": {
            "type": "boolean",
            "default": true,
            "description": "Enable context-aware reranking that considers metadata relevance alongside semantic similarity"
          },
          "max_results": {
            "type": "integer",
            "minimum": 1,
            "maximum": 50,
            "default": 10,
            "description": "Maximum number of results to return after context filtering and reranking"
          }
        }
      },
      "ContextualSearchResponse": {
        "type": "object",
        "required": [
          "api_version",
          "results",
          "metadata",
          "timestamp",
          "tool_metadata"
        ],
        "properties": {
          "api_version": {
            "type": "string",
            "description": "API version",
            "example": "1.0.0"
          },
          "results": {
            "type": "object",
            "description": "Search results organized by collection",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IntelligentSearchResult"
              }
            }
          },
          "metadata": {
            "type": "object",
            "required": [
              "collections_searched",
              "total_queries",
              "total_results_found",
              "results_after_dedup",
              "processing_time_ms"
            ],
            "properties": {
              "collections_searched": {
                "type": "integer",
                "description": "Number of collections searched"
              },
              "total_queries": {
                "type": "integer",
                "description": "Total number of queries executed"
              },
              "total_results_found": {
                "type": "integer",
                "description": "Total results found before context filtering"
              },
              "results_after_dedup": {
                "type": "integer",
                "description": "Results after context filtering and reranking"
              },
              "processing_time_ms": {
                "type": "number",
                "description": "Total processing time in milliseconds"
              }
            }
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Response timestamp"
          },
          "tool_metadata": {
            "type": "object",
            "required": [
              "tool_name"
            ],
            "properties": {
              "tool_name": {
                "type": "string",
                "description": "Name of the tool used",
                "example": "contextual_search"
              },
              "additional_info": {
                "type": "string",
                "description": "Additional tool-specific information"
              }
            }
          }
        }
      },
      "IntelligentSearchResult": {
        "type": "object",
        "required": [
          "id",
          "score",
          "content",
          "metadata"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the result"
          },
          "score": {
            "type": "number",
            "description": "Relevance score (0.0 to 1.0)"
          },
          "content": {
            "type": "string",
            "description": "The actual text content of the result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the result",
            "properties": {
              "file_path": {
                "type": "string",
                "description": "Path to the source file"
              },
              "file_extension": {
                "type": "string",
                "description": "File extension"
              },
              "line_number": {
                "type": "integer",
                "description": "Line number in the source file"
              },
              "chunk_index": {
                "type": "integer",
                "description": "Index of the chunk within the document"
              },
              "author": {
                "type": "string",
                "description": "Author of the content"
              },
              "version": {
                "type": "string",
                "description": "Version information"
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Creation timestamp"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "description": "Last update timestamp"
              }
            }
          }
        }
      },
      "DiscoverRequest": {
        "type": "object",
        "required": [
          "query"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "User question or search query"
          },
          "include_collections": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Collections to include (glob patterns)"
          },
          "exclude_collections": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Collections to exclude"
          },
          "max_bullets": {
            "type": "integer",
            "default": 20,
            "description": "Maximum evidence bullets"
          },
          "broad_k": {
            "type": "integer",
            "default": 50,
            "description": "Broad search results"
          },
          "focus_k": {
            "type": "integer",
            "default": 15,
            "description": "Focus search results per collection"
          }
        }
      },
      "DiscoverResponse": {
        "type": "object",
        "properties": {
          "answer_prompt": {
            "type": "string",
            "description": "LLM-ready prompt"
          },
          "sections": {
            "type": "integer",
            "description": "Number of sections"
          },
          "bullets": {
            "type": "integer",
            "description": "Number of bullets"
          },
          "chunks": {
            "type": "integer",
            "description": "Number of chunks"
          },
          "metrics": {
            "type": "object",
            "description": "Discovery metrics"
          }
        }
      },
      "GetFileContentRequest": {
        "type": "object",
        "required": [
          "collection",
          "file_path"
        ],
        "properties": {
          "collection": {
            "type": "string",
            "description": "Collection name"
          },
          "file_path": {
            "type": "string",
            "description": "Relative file path within collection"
          },
          "max_size_kb": {
            "type": "integer",
            "default": 500,
            "minimum": 1,
            "maximum": 5000,
            "description": "Maximum file size in KB"
          }
        }
      },
      "FileContentResponse": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "string"
          },
          "file_path": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "size_bytes": {
            "type": "integer"
          },
          "file_type": {
            "type": "string"
          },
          "chunks_count": {
            "type": "integer"
          }
        }
      },
      "ListFilesRequest": {
        "type": "object",
        "required": [
          "collection"
        ],
        "properties": {
          "collection": {
            "type": "string",
            "description": "Collection name"
          },
          "filter_by_type": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter by file types"
          },
          "min_chunks": {
            "type": "integer",
            "description": "Minimum number of chunks"
          },
          "max_results": {
            "type": "integer",
            "default": 100,
            "description": "Maximum number of results"
          },
          "sort_by": {
            "type": "string",
            "enum": [
              "name",
              "size",
              "chunks",
              "recent"
            ],
            "default": "name",
            "description": "Sort order"
          }
        }
      },
      "ListFilesResponse": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "string"
          },
          "files": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "file_path": {
                  "type": "string"
                },
                "file_type": {
                  "type": "string"
                },
                "size_bytes": {
                  "type": "integer"
                },
                "chunks_count": {
                  "type": "integer"
                }
              }
            }
          },
          "total_files": {
            "type": "integer"
          }
        }
      },
      "GetFileSummaryRequest": {
        "type": "object",
        "required": [
          "collection",
          "file_path"
        ],
        "properties": {
          "collection": {
            "type": "string"
          },
          "file_path": {
            "type": "string"
          },
          "summary_type": {
            "type": "string",
            "enum": [
              "extractive",
              "structural",
              "both"
            ],
            "default": "both"
          },
          "max_sentences": {
            "type": "integer",
            "default": 5,
            "minimum": 1,
            "maximum": 20
          }
        }
      },
      "FileSummaryResponse": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "string"
          },
          "file_path": {
            "type": "string"
          },
          "summary_type": {
            "type": "string"
          },
          "extractive_summary": {
            "type": "string"
          },
          "structural_summary": {
            "type": "object"
          }
        }
      },
      "GetFileChunksRequest": {
        "type": "object",
        "required": [
          "collection",
          "file_path"
        ],
        "properties": {
          "collection": {
            "type": "string"
          },
          "file_path": {
            "type": "string"
          },
          "start_chunk": {
            "type": "integer",
            "default": 0,
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "default": 10,
            "minimum": 1,
            "maximum": 50
          },
          "include_context": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "FileChunksResponse": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "string"
          },
          "file_path": {
            "type": "string"
          },
          "chunks": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "chunk_index": {
                  "type": "integer"
                },
                "content": {
                  "type": "string"
                },
                "start_line": {
                  "type": "integer"
                },
                "end_line": {
                  "type": "integer"
                }
              }
            }
          },
          "total_chunks": {
            "type": "integer"
          }
        }
      },
      "GetProjectOutlineRequest": {
        "type": "object",
        "required": [
          "collection"
        ],
        "properties": {
          "collection": {
            "type": "string"
          },
          "max_depth": {
            "type": "integer",
            "default": 5,
            "minimum": 1,
            "maximum": 10
          },
          "include_summaries": {
            "type": "boolean",
            "default": false
          },
          "highlight_key_files": {
            "type": "boolean",
            "default": true
          }
        }
      },
      "ProjectOutlineResponse": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "string"
          },
          "outline": {
            "type": "object"
          },
          "total_files": {
            "type": "integer"
          },
          "total_directories": {
            "type": "integer"
          }
        }
      },
      "GetRelatedFilesRequest": {
        "type": "object",
        "required": [
          "collection",
          "file_path"
        ],
        "properties": {
          "collection": {
            "type": "string"
          },
          "file_path": {
            "type": "string"
          },
          "limit": {
            "type": "integer",
            "default": 5,
            "minimum": 1,
            "maximum": 20
          },
          "similarity_threshold": {
            "type": "number",
            "default": 0.6,
            "minimum": 0.0,
            "maximum": 1.0
          },
          "include_reason": {
            "type": "boolean",
            "default": true
          }
        }
      },
      "RelatedFilesResponse": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "string"
          },
          "reference_file": {
            "type": "string"
          },
          "related_files": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "file_path": {
                  "type": "string"
                },
                "similarity_score": {
                  "type": "number"
                },
                "reason": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "SearchByFileTypeRequest": {
        "type": "object",
        "required": [
          "collection",
          "query",
          "file_types"
        ],
        "properties": {
          "collection": {
            "type": "string"
          },
          "query": {
            "type": "string"
          },
          "file_types": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "File extensions to search"
          },
          "limit": {
            "type": "integer",
            "default": 10,
            "minimum": 1,
            "maximum": 50
          },
          "return_full_files": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "SearchByFileTypeResponse": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "string"
          },
          "query": {
            "type": "string"
          },
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "file_path": {
                  "type": "string"
                },
                "file_type": {
                  "type": "string"
                },
                "score": {
                  "type": "number"
                },
                "content": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "apiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "API key for authentication"
      }
    }
  },
  "tags": [
    {
      "name": "System",
      "description": "System health and statistics"
    },
    {
      "name": "Collections",
      "description": "Collection management operations"
    },
    {
      "name": "Vectors",
      "description": "Vector operations (insert, list, delete)"
    },
    {
      "name": "Search",
      "description": "Search operations"
    },
    {
      "name": "Intelligent Search",
      "description": "Advanced intelligent search operations with AI-powered query expansion, semantic reranking, and contextual filtering"
    },
    {
      "name": "Batch Operations",
      "description": "Batch processing operations"
    },
    {
      "name": "Embedding",
      "description": "Embedding provider management"
    },
    {
      "name": "Indexing",
      "description": "Indexing progress and status"
    },
    {
      "name": "Summarization",
      "description": "Text summarization operations"
    },
    {
      "name": "Discovery",
      "description": "Discovery pipeline and components for intelligent information extraction"
    },
    {
      "name": "File Operations",
      "description": "File content retrieval and analysis operations"
    }
  ],
  "externalDocs": {
    "description": "Vectorizer Documentation",
    "url": "https://github.com/hivellm/vectorizer"
  }
}