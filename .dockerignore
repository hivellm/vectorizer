# Docker build context optimization
# CRITICAL: Ensure target directory is completely excluded to avoid permission errors

# Git files
.git
.gitignore
.gitattributes
.gitkeep

# Build artifacts - MUST be excluded to avoid permission errors
target
**/target
Cargo.lock.bak
*.o
*.so
*.rlib
*.dylib
*.dll
*.exe

# Large subdirectories that shouldn't be in build context
client-sdks
benchmark
benchmarks
devops
debian
gui
qdrant
dashboard
scripts
sample
integrations
pkg
wix

# Logs and data
*.log
logs
.logs
# Exclude data directories but NOT src code
/data
snapshots
# IMPORTANT: Do NOT exclude src/storage - it's source code!
!src/storage

# Test files and benchmarks
# Keep source tests but exclude test artifacts
/tests
benchmarks
coverage
**/coverage
lcov.info
lcov-core.info
coverage.json
*.profdata
*.profraw
# IMPORTANT: Keep src/tests if they exist
!src/tests

# Documentation and examples (keep only essential)
docs
**/docs
examples
*.md
!README.md
RELEASING.md
CONTRIBUTING.md
CHANGELOG.md
AGENTS.md
SECURITY.md
openspec

# IDE files
.vscode
.idea
*.swp
*.swo
*.code-workspace
.vs
.fleet

# CI/CD
.github
.gitlab-ci.yml

# Development files
.env
.env.*
*.local
config.*.yml
!config.example.yml
!config.yml
config.development.yml
config.production.yml
config.windows.yml
vectorize-workspace.yml
vectorize-workspace.docker.example.yml

# OS files
.DS_Store
Thumbs.db
desktop.ini

# Package files and artifacts
*.tar.gz
*.zip
*.deb
*.msi
*.AppImage
*.rpm
artifacts
release
AppDir

# Node.js
node_modules
**/node_modules
pnpm-lock.yaml
package-lock.json

# Python
venv
**/venv
__pycache__
**/__pycache__
*.pyc
*.pyo
*.pyd

# Cache and temporary files
.cache
**/.cache
tmp
temp
*.tmp
*.bak
*.swp
*.swo
*~

# Binary and library files (exclude pre-built)
*.a
lib
lib64
**/lib
**/lib64
**/bin

# Model files (keep only if needed for build, otherwise exclude)
models
**/models/*.bin
**/models/*.safetensors
**/models/*.onnx
!src/models

# Rust-specific
**/*.rs.bk
rust-toolchain.toml.bak

# Testing and development databases
*.db
*.db-shm
*.db-wal
governance.db*

# Compiled binaries that shouldn't be in context
vectorizer-local
vectorizer-cli
test_*
benchmark_*

# Docker files themselves
Dockerfile.main
docker-compose.override.yml

# Large log files and outputs
benchmark_output.txt
benchmark_results.json
test_*.json
*.spdx.json
