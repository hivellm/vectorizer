syntax = "proto3";

package vectorizer;

// Serviço principal do Vectorizer
service VectorizerService {
  // Operações de busca
  rpc Search(SearchRequest) returns (SearchResponse);
  
  // Operações de coleções
  rpc ListCollections(Empty) returns (ListCollectionsResponse);
  rpc GetCollectionInfo(GetCollectionInfoRequest) returns (CollectionInfo);
  rpc CreateCollection(CreateCollectionRequest) returns (CreateCollectionResponse);
  rpc DeleteCollection(DeleteCollectionRequest) returns (DeleteCollectionResponse);
  
  // Operações de vetores
  rpc InsertTexts(InsertTextsRequest) returns (InsertTextsResponse);
  rpc DeleteVectors(DeleteVectorsRequest) returns (DeleteVectorsResponse);
  rpc GetVector(GetVectorRequest) returns (GetVectorResponse);
  
  // Operações de embedding
  rpc EmbedText(EmbedRequest) returns (EmbedResponse);
  
  // Operações de indexação
  rpc GetIndexingProgress(Empty) returns (IndexingProgressResponse);
  rpc UpdateIndexingProgress(UpdateIndexingProgressRequest) returns (Empty);
  
  // Health check
  rpc HealthCheck(Empty) returns (HealthResponse);
  
  // Operações de sumarização
  rpc SummarizeText(SummarizeTextRequest) returns (SummarizeTextResponse);
  rpc SummarizeContext(SummarizeContextRequest) returns (SummarizeContextResponse);
  rpc GetSummary(GetSummaryRequest) returns (GetSummaryResponse);
  rpc ListSummaries(ListSummariesRequest) returns (ListSummariesResponse);
}

// Mensagens de busca
message SearchRequest {
  string collection = 1;
  string query = 2;
  int32 limit = 3;
  optional float threshold = 4;
}

message SearchResult {
  string id = 1;
  string content = 2;
  float score = 3;
  map<string, string> metadata = 4;
}

message SearchResponse {
  repeated SearchResult results = 1;
  int32 total_found = 2;
  double search_time_ms = 3;
}

// Mensagens de coleções
message Empty {}

message CollectionInfo {
  string name = 1;
  int32 vector_count = 2;
  int32 document_count = 3;
  int32 dimension = 4;
  string similarity_metric = 5;
  string status = 6;
  string last_updated = 7;
  optional string error_message = 8;
}

message ListCollectionsResponse {
  repeated CollectionInfo collections = 1;
  int32 total_collections = 2;
}

message GetCollectionInfoRequest {
  string collection_name = 1;
}

// Mensagens para criação e exclusão de coleções
message CreateCollectionRequest {
  string name = 1;
  int32 dimension = 2;
  string similarity_metric = 3;
  optional HnswConfig hnsw_config = 4;
  optional CompressionConfig compression_config = 5;
}

message CreateCollectionResponse {
  string name = 1;
  int32 dimension = 2;
  string similarity_metric = 3;
  string status = 4;
  string message = 5;
}

message DeleteCollectionRequest {
  string collection_name = 1;
}

message DeleteCollectionResponse {
  string collection_name = 1;
  string status = 2;
  string message = 3;
}

// Mensagens para operações de vetores
message TextData {
  string id = 1;
  string text = 2;
  map<string, string> metadata = 3;
}

message InsertTextsRequest {
  string collection = 1;
  repeated TextData texts = 2;
  string provider = 3;
}

message InsertTextsResponse {
  string collection = 1;
  int32 inserted_count = 2;
  string status = 3;
  string message = 4;
}

message DeleteVectorsRequest {
  string collection = 1;
  repeated string vector_ids = 2;
}

message DeleteVectorsResponse {
  string collection = 1;
  int32 deleted_count = 2;
  string status = 3;
  string message = 4;
}

message GetVectorRequest {
  string collection = 1;
  string vector_id = 2;
}

message GetVectorResponse {
  string id = 1;
  repeated float data = 2;
  map<string, string> metadata = 3;
  string collection = 4;
  string status = 5;
}

// Configurações
message HnswConfig {
  int32 m = 1;
  int32 ef_construction = 2;
  int32 ef_search = 3;
  int32 seed = 4;
}

message CompressionConfig {
  bool enabled = 1;
  int32 threshold_bytes = 2;
  string algorithm = 3;
}

// Mensagens de embedding
message EmbedRequest {
  string text = 1;
  string provider = 2;
}

message EmbedResponse {
  repeated float embedding = 1;
  int32 dimension = 2;
  string provider = 3;
}

// Mensagens de indexação
message IndexingStatus {
  string collection_name = 1;
  string status = 2;
  float progress = 3;
  int32 vector_count = 4;
  optional string error_message = 5;
  string last_updated = 6;
}

message IndexingProgressResponse {
  repeated IndexingStatus collections = 1;
  bool is_indexing = 2;
  string overall_status = 3;
}

message UpdateIndexingProgressRequest {
  string collection_name = 1;
  string status = 2;
  float progress = 3;
  int32 vector_count = 4;
  optional string error_message = 5;
}

// Mensagens de health check
message HealthResponse {
  string status = 1;
  string service = 2;
  string version = 3;
  string timestamp = 4;
  optional string error_message = 5;
}

// Mensagens de sumarização
message SummarizeTextRequest {
  string text = 1;
  string method = 2;  // extractive, abstractive, keyword, sentence
  optional int32 max_length = 3;  // Maximum summary length
  optional float compression_ratio = 4;  // Compression ratio (0.1-0.9)
  optional string language = 5;  // Language code (en, pt, es, etc.)
  map<string, string> metadata = 6;  // Additional metadata
}

message SummarizeTextResponse {
  string summary_id = 1;
  string original_text = 2;
  string summary = 3;
  string method = 4;
  int32 original_length = 5;
  int32 summary_length = 6;
  float compression_ratio = 7;
  string language = 8;
  string status = 9;
  string message = 10;
  map<string, string> metadata = 11;
}

message SummarizeContextRequest {
  string context = 1;
  string method = 2;  // extractive, abstractive, keyword, sentence
  optional int32 max_length = 3;
  optional float compression_ratio = 4;
  optional string language = 5;
  map<string, string> metadata = 6;
}

message SummarizeContextResponse {
  string summary_id = 1;
  string original_context = 2;
  string summary = 3;
  string method = 4;
  int32 original_length = 5;
  int32 summary_length = 6;
  float compression_ratio = 7;
  string language = 8;
  string status = 9;
  string message = 10;
  map<string, string> metadata = 11;
}

message GetSummaryRequest {
  string summary_id = 1;
}

message GetSummaryResponse {
  string summary_id = 1;
  string original_text = 2;
  string summary = 3;
  string method = 4;
  int32 original_length = 5;
  int32 summary_length = 6;
  float compression_ratio = 7;
  string language = 8;
  string created_at = 9;
  map<string, string> metadata = 10;
  string status = 11;
}

message ListSummariesRequest {
  optional string method = 1;  // Filter by summarization method
  optional string language = 2;  // Filter by language
  optional int32 limit = 3;  // Maximum number of summaries to return
  optional int32 offset = 4;  // Offset for pagination
}

message SummaryInfo {
  string summary_id = 1;
  string method = 2;
  string language = 3;
  int32 original_length = 4;
  int32 summary_length = 5;
  float compression_ratio = 6;
  string created_at = 7;
  map<string, string> metadata = 8;
}

message ListSummariesResponse {
  repeated SummaryInfo summaries = 1;
  int32 total_count = 2;
  string status = 3;
}
