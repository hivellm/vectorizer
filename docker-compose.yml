version: '3.8'

services:
  vectorizer:
    build: .
    container_name: vectorizer-server
    ports:
      - "15001:15001"  # Main HTTP API
      - "15002:15002"  # Dashboard
      - "15003:15003"  # MCP WebSocket
    volumes:
      - vectorizer_data:/app/data
      - vectorizer_logs:/app/logs
      - vectorizer_cache:/app/cache
      - ./config.yml:/app/config.yml:ro
    environment:
      - RUST_LOG=info
      - RUST_BACKTRACE=1
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:15001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - vectorizer-network

  # Optional: Redis for caching (if needed)
  redis:
    image: redis:7-alpine
    container_name: vectorizer-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - vectorizer-network
    profiles:
      - cache

  # Optional: Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: vectorizer-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - vectorizer-network
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: vectorizer-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: unless-stopped
    networks:
      - vectorizer-network
    profiles:
      - monitoring

volumes:
  vectorizer_data:
    driver: local
  vectorizer_logs:
    driver: local
  vectorizer_cache:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  vectorizer-network:
    driver: bridge
